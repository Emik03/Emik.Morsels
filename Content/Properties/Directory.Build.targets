<!-- SPDX-License-Identifier: MPL-2.0 -->
<Project>
    <!-- Fody weaver configuration for C#. -->
    <PropertyGroup Condition="'$(MSBuildProjectExtension)' == '.csproj' and '$(WeaverConfiguration)' == ''">
        <WeaverConfiguration>
            <Weavers>
                <ILMerge CompactMode="true" IncludeAssemblies="[\w\W]*" ExcludeAssemblies="$(DoNotMerge)"/>
                <JetBrainsAnnotations/>
                <NullGuard/>
                <InlineIL/>
                <Divorce/>
                <InlineMethod/>
                <LocalsInit Default="false"/>
                <Absence Except="$(DoNotTrim)"/>
            </Weavers>
        </WeaverConfiguration>
    </PropertyGroup>
    <!-- Fody weaver configuration for F#. -->
    <PropertyGroup Condition="'$(MSBuildProjectExtension)' == '.fsproj' and '$(WeaverConfiguration)' == ''">
        <WeaverConfiguration>
            <Weavers>
                <ILMerge CompactMode="true" IncludeAssemblies="[\w\W]*" ExcludeAssemblies="$(DoNotMerge)"/>
                <Divorce/>
                <InlineIL/>
                <InlineMethod/>
                <LocalsInit Default="false"/>
                <Absence Except="$(DoNotTrim)"/>
            </Weavers>
        </WeaverConfiguration>
    </PropertyGroup>
    <!-- Properties for wawa projects. -->
    <PropertyGroup Condition="$(AssemblyName.StartsWith(&quot;wawa.&quot;))">
        <FileVersion>6.0.1</FileVersion>
        <Nullable>annotations</Nullable>
        <CopyrightSince>2022</CopyrightSince>
        <DefineConstants>$(DefineConstants);WAWA</DefineConstants>
        <NoWarn>$(NoWarn);CS0419;CI0003;IDE0032;MA0169;Proj0202;Proj0204;Proj0205</NoWarn>
        <WeaverConfiguration>
            <Weavers>
                <JetBrainsAnnotations/>
                <NullGuard Mode="Implicit"/>
                <LocalsInit Default="false"/>
                <Divorce/>
                <Absence Except="$(DoNotTrim)"/>
            </Weavers>
        </WeaverConfiguration>
    </PropertyGroup>
    <!-- Adds Keep Talking and Nobody Explodes references implicitly, but allow opting-out of the reference. -->
    <PropertyGroup Condition="$(AssemblyName.StartsWith(&quot;wawa.&quot;)) and '$(IsKtane)' == ''">
        <IsKtane>true</IsKtane>
    </PropertyGroup>
    <!-- Common and/or default values that reference values in Directory.Build.props. -->
    <PropertyGroup>
        <Title>$(AssemblyName)</Title>
        <Version>$(FileVersion)</Version>
        <AssemblyVersion>$(FileVersion)</AssemblyVersion>
        <Out>&quot;$(OutDir)$(AssemblyName).dll&quot;</Out>
        <InformationalVersion>$(FileVersion)</InformationalVersion>
        <PackageProjectUrl Condition="'$(PackageProjectUrl)' == ''">$(RepositoryUrl)</PackageProjectUrl>
        <DefineConstants Condition="'$(IsKtane)' == 'true'">$(DefineConstants);KTANE;NO_SYSTEM_MEMORY</DefineConstants>
        <RootNamespace Condition="'$(RootNamespace)' == ''">$(AssemblyName.Substring(0, 1).ToUpper())$(AssemblyName.Substring(1))</RootNamespace>
        <Copyright Condition="$(CopyrightSince) != ''">Copyright Â© Emik $(CopyrightSince) - $([System.DateTime]::Now.ToString('yyyy'))</Copyright>
        <DefineConstants Condition="!$([MSBuild]::IsTargetFrameworkCompatible('$(TargetFramework)', 'net9.0'))">$(DefineConstants);NO_ALLOWS_REF_STRUCT</DefineConstants>
        <DefineConstants Condition="'$(IsCeleste)' == 'true' and !$([MSBuild]::IsTargetFrameworkCompatible('$(TargetFramework)', 'netstandard1.3'))">$(DefineConstants);NO_READONLY_STRUCTS;NO_SYSTEM_MEMORY</DefineConstants>
    </PropertyGroup>
    <!-- Indicate that the project are for tests based on its name. -->
    <PropertyGroup Condition="$(AssemblyName.EndsWith(&quot;.Tests&quot;))">
        <IsTestProject>true</IsTestProject>
        <IsPublishable>false</IsPublishable>
    </PropertyGroup>
    <!-- Reference weaved reference dll's from Emik.Morsels. -->
    <PropertyGroup Condition="$([MSBuild]::IsTargetFrameworkCompatible('$(TargetFramework)', 'net20')) and !$([MSBuild]::IsTargetFrameworkCompatible('$(TargetFramework)', 'net40'))">
        <AssemblySearchPaths>$(Morsels)/References/;$(AssemblySearchPaths)</AssemblySearchPaths>
    </PropertyGroup>
    <!-- Properties for Roslyn analyzer projects. -->
    <PropertyGroup Condition="($(AssemblyName.Contains(&quot;Analyzer&quot;)) or $(AssemblyName.Contains(&quot;SourceGenerator&quot;))) and !$(AssemblyName.EndsWith(&quot;.Generated.Tests&quot;))">
        <IncludeBuildOutput>false</IncludeBuildOutput>
        <DefineConstants>$(DefineConstants);ROSLYN</DefineConstants>
        <EnforceExtendedAnalyzerRules>true</EnforceExtendedAnalyzerRules>
        <NoWarn>$(NoWarn);CS419;CS1574;CS1580;CS3001;CS3002;CS3003;CS3009;CS3024;CS8601;CS8604;CS8669;CS8767;CS9124</NoWarn>
    </PropertyGroup>
    <!-- Properties for Unit Test projects. -->
    <PropertyGroup Condition="$(AssemblyName.EndsWith(&quot;.Tests&quot;))">
        <IsPackable>false</IsPackable>
        <NoWarn>$(NoWarn);CS1591;CS1595;CA1707;NUnit2005;SA1600</NoWarn>
    </PropertyGroup>
    <!-- Use separate copy of Celeste if one is specified. -->
    <PropertyGroup Condition="$(CelesteLegacy) != '' and !$([MSBuild]::IsTargetFrameworkCompatible('$(TargetFramework)', 'netstandard1.3'))">
        <Celeste>$(CelesteLegacy)</Celeste>
    </PropertyGroup>
    <!-- Show implicitly added files on Solution Explorer. -->
    <ItemGroup>
        <None Remove="$(AssemblyName).Tests/**"/>
        <Compile Remove="$(AssemblyName).Tests/**"/>
        <PackageReference Remove="$(AssemblyName)"/>
        <None Remove="$(AssemblyName).Generated.Tests/**"/>
        <Compile Remove="$(AssemblyName).Generated.Tests/**"/>
        <EditorConfigFiles Remove="$(AssemblyName).Tests/**"/>
        <EditorConfigFiles Remove="$(AssemblyName).Generated.Tests/**"/>
        <PackageReference Condition="$(AssemblyName.EndsWith(&quot;.Fody&quot;))" Include="FodyHelpers" Version="6.9.1"/>
        <Compile Condition="(!$(AssemblyName.Contains(&quot;Analyzer&quot;)) and !$(AssemblyName.Contains(&quot;SourceGenerator&quot;))) or $(AssemblyName.EndsWith(&quot;.Tests&quot;))" Remove="$(Morsels)/Compile/**/Roslyn/**"/>
        <PackageReference Condition="'$(MSBuildProjectExtension)' != '.fsproj' and $([MSBuild]::IsTargetFrameworkCompatible('$(TargetFramework)', 'netstandard2.0')) and !$([System.Text.RegularExpressions.Regex]::IsMatch('$(DefineConstants)', '(?:^|;)NO_SYSTEM_MEMORY(?:;|$)'))" Include="CommunityToolkit.Common" Version="8.4"/>
        <PackageReference Condition="'$(MSBuildProjectExtension)' != '.fsproj' and $([MSBuild]::IsTargetFrameworkCompatible('$(TargetFramework)', 'netstandard2.0')) and !$([System.Text.RegularExpressions.Regex]::IsMatch('$(DefineConstants)', '(?:^|;)NO_SYSTEM_MEMORY(?:;|$)'))" Include="CommunityToolkit.Diagnostics" Version="8.4"/>
        <PackageReference Condition="'$(MSBuildProjectExtension)' != '.fsproj' and $([MSBuild]::IsTargetFrameworkCompatible('$(TargetFramework)', 'netstandard2.0')) and !$([System.Text.RegularExpressions.Regex]::IsMatch('$(DefineConstants)', '(?:^|;)NO_SYSTEM_MEMORY(?:;|$)'))" Include="CommunityToolkit.HighPerformance" Version="8.4"/>
        <PackageReference Condition="!$(DefineConstants.Contains('NO_SYSTEM_MEMORY')) and !$(AssemblyName.Contains(&quot;Analyzer&quot;)) and !$(AssemblyName.Contains(&quot;SourceGenerator&quot;)) and '$(TargetFramework)' != 'netstandard2.1' and $([MSBuild]::IsTargetFrameworkCompatible('$(TargetFramework)', 'netstandard2.0')) and !$([MSBuild]::IsTargetFrameworkCompatible('$(TargetFramework)', 'netcoreapp2.1'))" Include="System.Memory" Version="4.6.3" PrivateAssets="all"/>
    </ItemGroup>
    <!-- Celeste references. -->
    <ItemGroup Condition="'$(IsCeleste)' == 'true'">
        <PackageReference Remove="Emik.SourceGenerators.Tattoo"/>
        <Reference Include="DotNetZip" HintPath="$(Celeste)/DotNetZip.dll" Private="false"/>
        <Reference Include="YamlDotNet" HintPath="$(Celeste)/YamlDotNet.dll" Private="false"/>
        <Reference Include="MonoMod.Utils" HintPath="$(Celeste)/MonoMod.Utils.dll" Private="false"/>
        <Reference Include="MMHOOK_Celeste" HintPath="$(Celeste)/MMHOOK_Celeste.dll" Private="false"/>
        <Reference Condition="Exists('$(Celeste)/FNA.dll') and $([MSBuild]::IsTargetFrameworkCompatible('$(TargetFramework)', 'netcoreapp'))" Include="FNA" HintPath="$(Celeste)/FNA.dll" Private="false"/>
        <Reference Condition="Exists('$(Celeste)/Celeste.dll') and $([MSBuild]::IsTargetFrameworkCompatible('$(TargetFramework)', 'netcoreapp'))" Include="Celeste" HintPath="$(Celeste)/Celeste.dll" Private="false"/>
        <Reference Condition="Exists('$(Celeste)/Celeste.exe') and $([MSBuild]::IsTargetFrameworkCompatible('$(TargetFramework)', 'netframework'))" Include="Celeste" HintPath="$(Celeste)/Celeste.exe" Private="false"/>
        <Reference Condition="Exists('$(Celeste)/Celeste.Mod.mm.dll') and $([MSBuild]::IsTargetFrameworkCompatible('$(TargetFramework)', 'netframework'))" Include="Celeste.Mod" HintPath="$(Celeste)/Celeste.Mod.mm.dll" Private="false"/>
    </ItemGroup>
    <!-- Hollow Knight references. -->
    <ItemGroup Condition="'$(IsHollowKnight)' == 'true'">
        <Reference Include="PlayMaker" HintPath="$(HollowKnight)/hollow_knight_Data/Managed/PlayMaker.dll" Private="false"/>
        <Reference Include="UnityEngine" HintPath="$(HollowKnight)/hollow_knight_Data/Managed/UnityEngine.dll" Private="false"/>
        <Reference Include="Assembly-CSharp" HintPath="$(HollowKnight)/hollow_knight_Data/Managed/Assembly-CSharp.dll" Private="false"/>
        <Reference Include="Assembly-CSharp-firstpass" HintPath="$(HollowKnight)/hollow_knight_Data/Managed/Assembly-CSharp-firstpass.dll" Private="false"/>
        <Reference Condition="'$(UseUnityCoreModule)' == 'true'" Include="UnityEngine.CoreModule" HintPath="$(HollowKnight)/hollow_knight_Data/Managed/UnityEngine.CoreModule.dll" Private="false"/>
    </ItemGroup>
    <!-- Keep Talking and Nobody Explodes references, specifying paths to self-made dependencies to support System.Type.op_Equality. -->
    <ItemGroup Condition="'$(IsKtane)' == 'true'">
        <Reference Include="KMFramework" HintPath="$(Ktane)/ktane_Data/Managed/KMFramework.dll" Private="false"/>
        <Reference Include="UnityEditor" HintPath="$(Unity)/Editor/Data/Managed/UnityEditor.dll" Private="false"/>
        <Reference Include="UnityEngine" HintPath="$(Unity)/Editor/Data/Managed/UnityEngine.dll" Private="false"/>
        <Reference Include="Newtonsoft.Json" HintPath="$(Ktane)/ktane_Data/Managed/Newtonsoft.Json.dll" Private="false"/>
        <PackageReference Include="UnityEngineAnalyzer" Version="1.0" PrivateAssets="all" IncludeAssets="compile" ExcludeAssets="runtime"/>
        <Reference Condition="'$(MSBuildProjectExtension)' != '.fsproj'" Include="Assembly-CSharp" HintPath="$(Ktane)/ktane_Data/Managed/Assembly-CSharp.dll" Private="false"/>
        <Reference Condition="'$(UseUnityCoreModule)' == 'true'" Include="UnityEngine.CoreModule" Private="false" HintPath="$(Unity)/Editor/Data/Managed/UnityEngine/UnityEngine.CoreModule.dll"/>
    </ItemGroup>
    <!-- Rain World references. -->
    <ItemGroup Condition="'$(IsRainWorld)' == 'true'">
        <Reference Include="BepInEx" HintPath="$(RainWorld)/BepInEx/core/BepInEx.dll" Private="false"/>
        <Reference Include="UnityEngine" HintPath="$(RainWorld)/RainWorld_Data/Managed/UnityEngine.dll" Private="false"/>
        <Reference Include="HOOKS-Assembly-CSharp" HintPath="$(RainWorld)/BepInEx/plugins/HOOKS-Assembly-CSharp.dll" Private="false"/>
        <Reference Include="PUBLIC-Assembly-CSharp" HintPath="$(RainWorld)/BepInEx/utils/PUBLIC-Assembly-CSharp.dll" Private="false"/>
        <Reference Condition="'$(UseUnityCoreModule)' == 'true'" Include="UnityEngine.CoreModule" HintPath="$(RainWorld)/RainWorld_Data/Managed/UnityEngine.CoreModule.dll" Private="false"/>
    </ItemGroup>
    <!-- Roslyn analyzer references. -->
    <ItemGroup Condition="($(AssemblyName.Contains(&quot;Analyzer&quot;)) or $(AssemblyName.Contains(&quot;SourceGenerator&quot;))) and !$(AssemblyName.EndsWith(&quot;.Tests&quot;))">
        <None Include="$(OutputPath)/$(AssemblyName).dll" Pack="true" PackagePath="analyzers/dotnet/cs" Visible="false"/>
        <PackageReference Include="Gu.Analyzers" Version="2.0.3" PrivateAssets="all" IncludeAssets="compile" ExcludeAssets="runtime"/>
        <PackageReference Include="Gu.Roslyn.Extensions.Source" Version="0.17.1" PrivateAssets="all" IncludeAssets="compile" ExcludeAssets="runtime" GeneratePathProperty="true"/>
        <Compile Include="$(PkgGu_Roslyn_Extensions_Source)/contentFiles/cs/any/**/*.cs"/>
    </ItemGroup>
    <!-- Reference roslyn analyzer from above onto tests. -->
    <ItemGroup Condition="($(AssemblyName.Contains(&quot;Analyzer&quot;)) or $(AssemblyName.Contains(&quot;SourceGenerator&quot;))) and $(AssemblyName.EndsWith(&quot;.Tests&quot;))">
        <ProjectReference Include="../*.csproj" OutputItemType="Analyzer" ReferenceOutputAssembly="false" PrivateAssets="all" IncludeAssets="compile" ExcludeAssets="runtime"/>
        <ProjectReference Include="../*.fsproj" OutputItemType="Analyzer" ReferenceOutputAssembly="false" PrivateAssets="all" IncludeAssets="compile" ExcludeAssets="runtime"/>
    </ItemGroup>
    <!-- References for Unit Test projects. Unit Tests are auto-generated; do not use most polyfills. -->
    <ItemGroup Condition="$(AssemblyName.EndsWith(&quot;.Tests&quot;))">
        <PackageReference Remove="GlobalUsingsAnalyzer"/>
        <ProjectReference Include="../*.csproj" PrivateAssets="all" IncludeAssets="compile" ExcludeAssets="runtime"/>
        <ProjectReference Include="../*.fsproj" PrivateAssets="all" IncludeAssets="compile" ExcludeAssets="runtime"/>
        <PackageReference Include="coverlet.collector" Version="6.0.4" PrivateAssets="all" IncludeAssets="compile" ExcludeAssets="runtime"/>
        <PackageReference Include="Microsoft.NET.Test.Sdk" Version="17.14.1" PrivateAssets="all" IncludeAssets="compile" ExcludeAssets="runtime"/>
        <PackageReference Condition="'$(UseNUnit)' == 'true'" Include="NUnit" Version="4.0.1" PrivateAssets="all" IncludeAssets="compile" ExcludeAssets="runtime"/>
        <PackageReference Condition="'$(UseNUnit)' != 'true'" Include="xunit" Version="2.9.3" PrivateAssets="all" IncludeAssets="compile" ExcludeAssets="runtime"/>
        <PackageReference Condition="'$(UseNUnit)' == 'true'" Include="NUnit.Analyzers" Version="3.10" PrivateAssets="all" IncludeAssets="compile" ExcludeAssets="runtime"/>
        <PackageReference Condition="'$(UseNUnit)' == 'true'" Include="NUnit3TestAdapter" Version="4.5" PrivateAssets="all" IncludeAssets="compile" ExcludeAssets="runtime"/>
        <PackageReference Condition="'$(UseNUnit)' != 'true'" Include="xunit.runner.console" Version="2.9.3" PrivateAssets="all" IncludeAssets="compile" ExcludeAssets="runtime"/>
        <PackageReference Condition="'$(UseNUnit)' != 'true'" Include="xunit.runner.visualstudio" Version="3.1.3" PrivateAssets="all" IncludeAssets="compile" ExcludeAssets="runtime"/>
    </ItemGroup>
    <!-- Item groups for wawa projects. -->
    <ItemGroup Condition="$(AssemblyName.StartsWith(&quot;wawa.&quot;))">
        <Compile Remove="$(Morsels)/Compile/Source/References/*/**/*.cs"/>
        <Compile Include="$(Morsels)/Compile/Source/References/Fody/ValidationFlags.cs" Link="Source/References/Fody/ValidationFlags.cs"/>
        <Compile Include="$(Morsels)/Compile/Source/References/Fody/AllowNullAttribute.cs" Link="Source/References/Fody/AllowNullAttribute.cs"/>
        <Compile Include="$(Morsels)/Compile/Source/References/Fody/NullGuardAttribute.cs" Link="Source/References/Fody/NullGuardAttribute.cs"/>
        <Compile Include="$(Morsels)/Compile/Source/References/System/Diagnostics/Attributes.cs" Link="Source/References/System/Diagnostics/Attributes.cs"/>
    </ItemGroup>
    <!-- Remove the template if all necessary item groups are filled. -->
    <ItemGroup Condition="'$(Morsels)' != '' and ('$(IsCeleste)' != 'true' or '$(Celeste)' != '') and ('$(IsKtane)' != 'true' or '$(Ktane)' != '') and ('$(IsUnity)' != 'true' or '$(Unity)' != '') and ('$(IsRainWorld)' != 'true' or '$(RainWorld)' != '') and ('$(IsHollowKnight)' != 'true' or '$(HollowKnight)' != '')">
        <Content Remove="$(Morsels)/Content/Properties/Directory.Build.local.props.template"/>
        <AdditionalFiles Remove="$(Morsels)/Content/Properties/Directory.Build.local.props.template"/>
    </ItemGroup>
    <!-- Hides any file that contains ".g.", which implies that it is auto-generated. -->
    <Target Name="HideAutoGeneratedFiles" BeforeTargets="Compile">
        <ItemGroup>
            <Compile Condition="$([System.Text.RegularExpressions.Regex]::IsMatch('%(FileName)%(Extension)', '^.*\.g\..*$'))" Visible="false"/>
        </ItemGroup>
    </Target>
    <!-- Pack the release into a zip. -->
    <Target Name="CreateReleaseZip" AfterTargets="PostBuildEvent" Condition="'$(IsHollowKnight)' == 'true' and '$(Configuration)' == 'Release'">
        <MakeDir Directories="$(ProjectDir)/artifacts;$(ProjectDir)/Temp"/>
        <Delete Files="$(ProjectDir)/artifacts/$(MSBuildProjectName).zip"/>
        <Copy SourceFiles="$(TargetPath)" DestinationFolder="$(ProjectDir)/Temp/"/>
        <Copy SourceFiles="$(SolutionDir)/README.md" DestinationFolder="$(ProjectDir)/Temp/"/>
        <Copy SourceFiles="$(TargetDir)$(TargetName).pdb" DestinationFolder="$(ProjectDir)/Temp/"/>
        <ZipDirectory SourceDirectory="$(ProjectDir)/Temp" DestinationFile="$(ProjectDir)/artifacts/$(MSBuildProjectName).zip"/>
        <RemoveDir Directories="$(ProjectDir)/Temp"/>
    </Target>
    <!-- Allows PackageReferences to be tagged with 'Aliases'. -->
    <Target Name="AddPackageAliases" BeforeTargets="ResolveReferences" Outputs="%(PackageReference.Identity)">
        <PropertyGroup>
            <AliasName>@(PackageReference->'%(Alias)')</AliasName>
            <AliasPackageReference>@(PackageReference->'%(Identity)')</AliasPackageReference>
        </PropertyGroup>
        <ItemGroup>
            <ReferencePath Condition="'%(FileName)' == '$(AliasPackageReference)'">
                <Aliases>$(AliasName)</Aliases>
            </ReferencePath>
        </ItemGroup>
    </Target>
    <!-- Allows specific libraries to have a distinct alias. -->
    <Target Name="ChangeAliasesOfStrongNameAssemblies" BeforeTargets="FindReferenceAssembliesForReferences;ResolveReferences">
        <ItemGroup>
            <ReferencePath Condition="'%(FileName)' == 'mscorlib'">
                <Aliases>global, ms</Aliases>
            </ReferencePath>
            <ReferencePath Condition="'%(FileName)' == 'UnityEngine'">
                <Aliases>global, unity</Aliases>
            </ReferencePath>
            <ReferencePath Condition="'%(FileName)' == 'UnityEngine.CoreModule'">
                <Aliases>core</Aliases>
            </ReferencePath>
        </ItemGroup>
    </Target>
    <!-- Copy files to Keep Talking and Nobody Explodes Modkit repository. -->
    <Target Name="CopyToDestination" AfterTargets="PostBuildEvent" Condition="'$(TargetFramework)' == 'net35' and $(Destination) != ''">
        <Exec Command="$(CopyCommand) $(Out) &quot;$(Destination)&quot;"/>
        <Exec Command="$(CopyCommand) &quot;$(OutDir)$(AssemblyName).xml&quot; &quot;$(Destination)&quot;"/>
        <Exec Command="$(CopyCommand) &quot;$(OutDir)$(AssemblyName).pdb&quot; &quot;$(Destination)&quot;" IgnoreExitCode="true"/>
    </Target>
    <!-- We only need to validate the properties that are being used. -->
    <Target Name="ValidateLocalProperties" BeforeTargets="PreBuildEvent">
        <Error Condition="'$(Morsels)' == ''" Text="Emik.Morsels link missing. Copy the template Emik.Morsels.local.props.template and rename it to Emik.Morsels.local.props and fill each tag with the respective directories on your local system. The folder to Emik.Morsels should be specified by having an Emik.Morsels.local.props file within or above the directories of this project." HelpLink="https://github.com/Emik03/Emik.Morsels#usage"/>
        <Error Condition="'$(IsUnity)' == 'true' and '$(Unity)' == ''" Text="Unity link missing. Copy the template Emik.Morsels.local.props.template and rename it to Emik.Morsels.local.props and fill each tag with the respective directories on your local system. The folder to Unity should be specified by having an Emik.Morsels.local.props file within or above the directories of this project." HelpLink="https://github.com/Emik03/Emik.Morsels#usage"/>
        <Error Condition="'$(IsCeleste)' == 'true' and '$(Celeste)' == ''" Text="Celeste link missing. Copy the template Emik.Morsels.local.props.template and rename it to Emik.Morsels.local.props and fill each tag with the respective directories on your local system. The folder to Celeste should be specified by having an Emik.Morsels.local.props file within or above the directories of this project." HelpLink="https://github.com/Emik03/Emik.Morsels#usage"/>
        <Error Condition="'$(IsRainWorld)' == 'true' and '$(IsRainWorld)' == ''" Text="Rain World link missing. Copy the template Emik.Morsels.local.props.template and rename it to Emik.Morsels.local.props and fill each tag with the respective directories on your local system. The folder to Rain World should be specified by having an Emik.Morsels.local.props file within or above the directories of this project." HelpLink="https://github.com/Emik03/Emik.Morsels#usage"/>
        <Error Condition="'$(IsHollowKnight)' == 'true' and '$(HollowKnight)' == ''" Text="Hollow Knight link missing. Copy the template Emik.Morsels.local.props.template and rename it to Emik.Morsels.local.props and fill each tag with the respective directories on your local system. The folder to Hollow Knight should be specified by having an Emik.Morsels.local.props file within or above the directories of this project." HelpLink="https://github.com/Emik03/Emik.Morsels#usage"/>
        <Error Condition="'$(IsKtane)' == 'true' and '$(Ktane)' == ''" Text="Keep Talking and Nobody Explodes link missing. Copy the template Emik.Morsels.local.props.template and rename it to Emik.Morsels.local.props and fill each tag with the respective directories on your local system. The folder to Keep Talking and Nobody Explodes should be specified by having an Emik.Morsels.local.props file within or above the directories of this project." HelpLink="https://github.com/Emik03/Emik.Morsels#usage"/>
    </Target>
</Project>
