<!-- SPDX-License-Identifier: MPL-2.0 -->
<Project>
    <!-- Use all compatible Fody projects for C# in .NET Framework 2.0 - 3.5. -->
    <PropertyGroup Condition="'$(MSBuildProjectExtension)' == '.csproj' and $([MSBuild]::IsTargetFrameworkCompatible('$(TargetFramework)', 'net20')) and !$([MSBuild]::IsTargetFrameworkCompatible('$(TargetFramework)', 'net40'))">
        <WeaverConfiguration>
            <Weavers>
                <Equals/>
                <InfoOf/>
                <InlineIL/>
                <TailCall/>
                <ToString/>
                <NullGuard/>
                <Substitute/>
                <Virtuosity/>
                <PrecompiledRegex/>
                <LocalsInit Default="false"/>
                <Caseless StringComparison="InvariantCulture"/>
                <InlineMethod/>
                <Absence/>
                <Divorce/>
            </Weavers>
        </WeaverConfiguration>
    </PropertyGroup>
    <!-- Use all compatible Fody projects for C# in .NET Framework 4.0. -->
    <PropertyGroup>
        <WeaverConfiguration Condition="'$(MSBuildProjectExtension)' == '.csproj' and $([MSBuild]::IsTargetFrameworkCompatible('$(TargetFramework)', 'net40')) and !$([MSBuild]::IsTargetFrameworkCompatible('$(TargetFramework)', 'net45'))">
            <Weavers>
                <Lazy/>
                <Equals/>
                <InfoOf/>
                <InlineIL/>
                <ToString/>
                <TailCall/>
                <NullGuard/>
                <Substitute/>
                <Virtuosity/>
                <PrecompiledRegex/>
                <LocalsInit Default="false"/>
                <Caseless StringComparison="InvariantCulture"/>
                <InlineMethod/>
                <Absence/>
            </Weavers>
        </WeaverConfiguration>
    </PropertyGroup>
    <!-- Use all compatible Fody projects for C# in .NET Standard 1.0 - 1.6. -->
    <PropertyGroup Condition="'$(MSBuildProjectExtension)' == '.csproj' and $([MSBuild]::IsTargetFrameworkCompatible('$(TargetFramework)', 'netstandard1.0')) and !$([MSBuild]::IsTargetFrameworkCompatible('$(TargetFramework)', 'netstandard2.0'))">
        <WeaverConfiguration>
            <Weavers>
                <Lazy/>
                <Equals/>
                <InfoOf/>
                <InlineIL/>
                <TailCall/>
                <NullGuard/>
                <Substitute/>
                <Virtuosity/>
                <PrecompiledRegex/>
                <LocalsInit Default="false"/>
                <InlineMethod/>
                <Absence/>
            </Weavers>
        </WeaverConfiguration>
    </PropertyGroup>
    <!-- Use all compatible Fody projects for C# in .NET Framework 4.5+ and .NET Standard 2.0+. -->
    <PropertyGroup Condition="'$(MSBuildProjectExtension)' == '.csproj' and $([MSBuild]::IsTargetFrameworkCompatible('$(TargetFramework)', 'netstandard2.0'))">
        <WeaverConfiguration>
            <Weavers>
                <Lazy/>
                <Equals/>
                <InfoOf/>
                <InlineIL/>
                <ToString/>
                <TailCall/>
                <NullGuard/>
                <Substitute/>
                <Virtuosity/>
                <PrecompiledRegex/>
                <LocalsInit Default="false"/>
                <Caseless StringComparison="InvariantCulture"/>
                <ConfigureAwait ContinueOnCapturedContext="false"/>
                <InlineMethod/>
                <Absence/>
            </Weavers>
        </WeaverConfiguration>
    </PropertyGroup>
    <!-- Use all compatible Fody projects for F# in .NET Framework 2.0 - 3.5. -->
    <PropertyGroup Condition="'$(MSBuildProjectExtension)' == '.fsproj' and $([MSBuild]::IsTargetFrameworkCompatible('$(TargetFramework)', 'net20')) and !$([MSBuild]::IsTargetFrameworkCompatible('$(TargetFramework)', 'net40'))">
        <WeaverConfiguration>
            <Weavers>
                <Equals/>
                <InfoOf/>
                <InlineIL/>
                <ToString/>
                <Substitute/>
                <Virtuosity/>
                <PrecompiledRegex/>
                <LocalsInit Default="false"/>
                <Caseless StringComparison="InvariantCulture"/>
                <InlineMethod/>
                <Divorce/>
                <Absence/>
            </Weavers>
        </WeaverConfiguration>
    </PropertyGroup>
    <!-- Use all compatible Fody projects for F# in .NET Framework 4.0. -->
    <PropertyGroup>
        <WeaverConfiguration Condition="'$(MSBuildProjectExtension)' == '.fsproj' and $([MSBuild]::IsTargetFrameworkCompatible('$(TargetFramework)', 'net40')) and !$([MSBuild]::IsTargetFrameworkCompatible('$(TargetFramework)', 'net45'))">
            <Weavers>
                <Lazy/>
                <Equals/>
                <InfoOf/>
                <InlineIL/>
                <ToString/>
                <Substitute/>
                <Virtuosity/>
                <PrecompiledRegex/>
                <LocalsInit Default="false"/>
                <Caseless StringComparison="InvariantCulture"/>
                <InlineMethod/>
                <Absence/>
            </Weavers>
        </WeaverConfiguration>
    </PropertyGroup>
    <!-- Use all compatible Fody projects for F# in .NET Standard 1.0 - 1.6. -->
    <PropertyGroup Condition="'$(MSBuildProjectExtension)' == '.fsproj' and $([MSBuild]::IsTargetFrameworkCompatible('$(TargetFramework)', 'netstandard1.0')) and !$([MSBuild]::IsTargetFrameworkCompatible('$(TargetFramework)', 'netstandard2.0'))">
        <WeaverConfiguration>
            <Weavers>
                <Lazy/>
                <Equals/>
                <InfoOf/>
                <InlineIL/>
                <Substitute/>
                <Virtuosity/>
                <PrecompiledRegex/>
                <LocalsInit Default="false"/>
                <InlineMethod/>
                <Absence/>
            </Weavers>
        </WeaverConfiguration>
    </PropertyGroup>
    <!-- Use all compatible Fody projects for F# in .NET Framework 4.5+ and .NET Standard 2.0+. -->
    <PropertyGroup Condition="'$(MSBuildProjectExtension)' == '.fsproj' and $([MSBuild]::IsTargetFrameworkCompatible('$(TargetFramework)', 'netstandard2.0'))">
        <WeaverConfiguration>
            <Weavers>
                <Lazy/>
                <Equals/>
                <InfoOf/>
                <InlineIL/>
                <ToString/>
                <Substitute/>
                <Virtuosity/>
                <PrecompiledRegex/>
                <LocalsInit Default="false"/>
                <Caseless StringComparison="InvariantCulture"/>
                <ConfigureAwait ContinueOnCapturedContext="false"/>
                <InlineMethod/>
                <Absence/>
            </Weavers>
        </WeaverConfiguration>
    </PropertyGroup>
    <!-- Properties for wawa projects. -->
    <PropertyGroup Condition="$(AssemblyName.StartsWith(&quot;wawa.&quot;))">
        <IsKtane>true</IsKtane>
        <FileVersion>4.0.3</FileVersion>
        <Nullable>annotations</Nullable>
        <DefineConstants>$(DefineConstants);WAWA</DefineConstants>
        <WeaverConfiguration>
            <Weavers>
                <Equals/>
                <InfoOf/>
                <InlineIL/>
                <ToString/>
                <NullGuard Mode="Implicit"/>
                <Substitute/>
                <Virtuosity/>
                <LocalsInit Default="false"/>
                <Caseless StringComparison="InvariantCulture"/>
                <InlineMethod/>
                <Divorce/>
                <Absence/>
            </Weavers>
        </WeaverConfiguration>
    </PropertyGroup>
    <!-- Defines the constant for Keep Talking and Nobody Explodes projects. -->
    <PropertyGroup Condition="'$(IsKtane)' == 'true'">
        <DefineConstants>$(DefineConstants);KTANE</DefineConstants>
    </PropertyGroup>
    <!-- Common and/or default values that reference values in Directory.Build.props. -->
    <PropertyGroup>
        <Title>$(AssemblyName)</Title>
        <Version>$(FileVersion)</Version>
        <AssemblyVersion>$(FileVersion)</AssemblyVersion>
        <Out>&quot;$(OutDir)$(AssemblyName).dll&quot;</Out>
        <InformationalVersion>$(FileVersion)</InformationalVersion>
        <MarkdownIndexFilePath>$(ProjectDir)Documentation/index.md</MarkdownIndexFilePath>
        <RootNamespace>$(AssemblyName.Substring(0, 1).ToUpper())$(AssemblyName.Substring(1))</RootNamespace>
        <DefaultDocumentationPlugins>$(Morsels)/References/Emik.DefaultDocumentation.dll</DefaultDocumentationPlugins>
    </PropertyGroup>
    <!-- The file 'index.md' may not necessarily exist. In which case the assembly name is probably used. -->
    <PropertyGroup Condition="!Exists('$(MarkdownIndexFilePath)')">
        <MarkdownIndexFilePath>$(ProjectDir)Documentation/$(AssemblyName).md</MarkdownIndexFilePath>
    </PropertyGroup>
    <!-- This is for assemblies whose first letter is lowercase, where namespaces are uppercase instead. -->
    <PropertyGroup Condition="!Exists('$(MarkdownIndexFilePath)')">
        <MarkdownIndexFilePath>$(ProjectDir)Documentation/$(RootNamespace).md</MarkdownIndexFilePath>
    </PropertyGroup>
    <!-- Reference weaved reference dll's from Emik.Morsels. -->
    <PropertyGroup Condition="$([MSBuild]::IsTargetFrameworkCompatible('$(TargetFramework)', 'net20')) and !$([MSBuild]::IsTargetFrameworkCompatible('$(TargetFramework)', 'net40'))">
        <AssemblySearchPaths>$(Morsels)/References/;$(AssemblySearchPaths)</AssemblySearchPaths>
    </PropertyGroup>
    <!-- Properties for Roslyn analyzer projects. -->
    <PropertyGroup Condition="($(AssemblyName.Contains(&quot;Analyzer&quot;)) or $(AssemblyName.Contains(&quot;SourceGenerator&quot;))) and !$(AssemblyName.EndsWith(&quot;.Tests&quot;))">
        <NoTests>true</NoTests>
        <DisableDefaultDocumentation>true</DisableDefaultDocumentation>
        <EnforceExtendedAnalyzerRules>true</EnforceExtendedAnalyzerRules>
    </PropertyGroup>
    <!-- Properties for Unit Test projects. -->
    <PropertyGroup Condition="$(AssemblyName.EndsWith(&quot;.Tests&quot;))">
        <IsPackable>false</IsPackable>
        <DefineConstants>$(DefineConstants);UNIT_TESTS</DefineConstants>
        <NoWarn>$(NoWarn);CA1707;CS1591;CS1595;MA0048;NUnit2005;SA1600;SA1649</NoWarn>
    </PropertyGroup>
    <!-- Show implicitly added files on Solution Explorer. -->
    <ItemGroup>
        <None Remove="Documentation/**"/>
        <PackageReference Remove="$(AssemblyName)"/>
        <None Remove="$(AssemblyName).Generated.Tests/**"/>
        <Compile Remove="$(AssemblyName).Generated.Tests/**"/>
    </ItemGroup>
    <!-- Allow the project to opt-out of this reference. -->
    <ItemGroup Condition="$(DisableDefaultDocumentation) != 'true'">
        <PackageReference Include="DefaultDocumentation" Version="0.8.3-beta1" PrivateAssets="all"/>
    </ItemGroup>
    <!-- Celeste references. -->
    <ItemGroup Condition="$(IsCeleste) == 'true'">
        <Reference Include="FNA" HintPath="$(Celeste)/FNA.dll" Private="false"/>
        <Reference Include="Celeste" HintPath="$(Celeste)/Celeste.dll" Private="false"/>
        <Reference Include="DotNetZip" HintPath="$(Celeste)/DotNetZip.dll" Private="false"/>
        <Reference Include="YamlDotNet" HintPath="$(Celeste)/YamlDotNet.dll" Private="false"/>
        <!--<PackageReference Include="RemoveReference.Fody" Version="1.0.5" PrivateAssets="all"/>-->
        <Reference Include="MonoMod.Utils" HintPath="$(Celeste)/MonoMod.Utils.dll" Private="false"/>
        <Reference Include="MMHOOK_Celeste" HintPath="$(Celeste)/MMHOOK_Celeste.dll" Private="false"/>
    </ItemGroup>
    <!-- Keep Talking and Nobody Explodes references, specifying paths to self-made dependencies to support System.Type.op_Equality. -->
    <ItemGroup Condition="$(IsKtane) == 'true'">
        <PackageReference Include="UnityEngineAnalyzer" Version="1.0.0" PrivateAssets="all"/>
        <Reference Include="KMFramework" HintPath="$(Ktane)/ktane_Data/Managed/KMFramework.dll" Private="false"/>
        <Reference Include="UnityEditor" HintPath="$(Unity)/Editor/Data/Managed/UnityEditor.dll" Private="false"/>
        <Reference Include="Newtonsoft.Json" HintPath="$(Ktane)/ktane_Data/Managed/Newtonsoft.Json.dll" Private="false"/>
        <Reference Include="UnityEngine" HintPath="$(Unity)/Editor/Data/Managed/UnityEngine.dll" Private="false" Aliases="global, unity"/>
    </ItemGroup>
    <!-- Keep Talking and Nobody Explodes references that F# hates for some reason. -->
    <ItemGroup Condition="'$(MSBuildProjectExtension)' != '.fsproj' and $(IsKtane) == 'true'">
        <Reference Include="Assembly-CSharp" HintPath="$(Ktane)/ktane_Data/Managed/Assembly-CSharp.dll" Private="false"/>
    </ItemGroup>
    <!-- Roslyn analyzer references. -->
    <ItemGroup Condition="($(AssemblyName.Contains(&quot;Analyzer&quot;)) or $(AssemblyName.Contains(&quot;SourceGenerator&quot;))) and !$(AssemblyName.EndsWith(&quot;.Tests&quot;))">
        <PackageReference Include="Gu.Analyzers" Version="2.0.3" PrivateAssets="all"/>
        <PackageReference Include="IDisposableAnalyzers" Version="4.0.6" PrivateAssets="all"/>
        <PackageReference Include="Microsoft.CodeAnalysis.CSharp.Workspaces" Version="4.7.0-1.final" PrivateAssets="all"/>
    </ItemGroup>
    <!-- Roslyn analyzer references. -->
    <ItemGroup Condition="($(AssemblyName.Contains(&quot;Analyzer&quot;)) or $(AssemblyName.Contains(&quot;SourceGenerator&quot;))) and $(AssemblyName.EndsWith(&quot;.Tests&quot;))">
        <ProjectReference Include="../*.csproj" OutputItemType="Analyzer" ReferenceOutputAssembly="false" PrivateAssets="all"/>
        <ProjectReference Include="../*.fsproj" OutputItemType="Analyzer" ReferenceOutputAssembly="false" PrivateAssets="all"/>
    </ItemGroup>
    <!-- Fody projects should reference FodyHelpers, and also not themselves. -->
    <ItemGroup Condition="$(AssemblyName.EndsWith(&quot;.Fody&quot;))">
        <PackageReference Include="FodyHelpers" Version="6.7.0"/>
    </ItemGroup>
    <!-- References for Unit Test projects. Unit Tests are auto-generated; do not use most polyfills. -->
    <ItemGroup Condition="$(AssemblyName.EndsWith(&quot;.Tests&quot;))">
        <PackageReference Remove="GlobalUsingsAnalyzer"/>
        <ProjectReference Include="../*.csproj" PrivateAssets="all"/>
        <ProjectReference Include="../*.fsproj" PrivateAssets="all"/>
        <PackageReference Include="NUnit" Version="3.13.3" PrivateAssets="all"/>
        <PackageReference Include="NUnit.Analyzers" Version="3.6.1" PrivateAssets="all"/>
        <PackageReference Include="coverlet.collector" Version="3.2.0" PrivateAssets="all"/>
        <PackageReference Include="Microsoft.NET.Test.Sdk" Version="17.6.0" PrivateAssets="all"/>
        <PackageReference Include="NUnit3TestAdapter" Version="4.5.0-alpha.4" PrivateAssets="all"/>
    </ItemGroup>
    <!-- Item groups for wawa projects. -->
    <ItemGroup Condition="$(AssemblyName.StartsWith(&quot;wawa.&quot;))">
        <Compile Include="$(Morsels)/Compile/Source/References/Fody/AllowNullAttribute.cs" Link="Source/References/Fody/AllowNullAttribute.cs"/>
        <Compile Include="$(Morsels)/Compile/Source/References/System/Diagnostics/Attributes.cs" Link="Source/References/System/Diagnostics/Attributes.cs"/>
    </ItemGroup>
    <!-- Use System.Memory for frameworks that can import it, but not implicitly. -->
    <ItemGroup Condition="!$(DefineConstants.Contains('NO_SYSTEM_MEMORY')) and '$(TargetFramework)' != 'netstandard2.1' and $([MSBuild]::IsTargetFrameworkCompatible('$(TargetFramework)', 'netstandard1.1')) and !$([MSBuild]::IsTargetFrameworkCompatible('$(TargetFramework)', 'netcoreapp2.1'))">
        <PackageReference Include="System.Memory" Version="4.5.5"/>
    </ItemGroup>
    <!-- Only Unit Tests should include additional global imports to make writing doctests barable. -->
    <ItemGroup Condition="'$(MSBuildProjectExtension)' != '.csproj' or !$(AssemblyName.EndsWith(&quot;.Tests&quot;))">
        <Compile Remove="$(Morsels)/Compile/Source/References/NUnit/**/*.cs"/>
    </ItemGroup>
    <!-- Allows PackageReferences to be tagged with 'Aliases'. -->
    <Target Name="AddPackageAliases" BeforeTargets="ResolveReferences" Outputs="%(PackageReference.Identity)">
        <PropertyGroup>
            <AliasName>@(PackageReference->'%(Alias)')</AliasName>
            <AliasPackageReference>@(PackageReference->'%(Identity)')</AliasPackageReference>
        </PropertyGroup>
        <ItemGroup>
            <ReferencePath Condition="'%(FileName)' == '$(AliasPackageReference)'">
                <Aliases>$(AliasName)</Aliases>
            </ReferencePath>
        </ItemGroup>
    </Target>
    <!-- Allows mscorlib to have a distinct alias. -->
    <Target Name="ChangeAliasesOfStrongNameAssemblies" BeforeTargets="FindReferenceAssembliesForReferences;ResolveReferences">
        <ItemGroup>
            <ReferencePath Condition="'%(FileName)' == 'mscorlib'">
                <Aliases>global, ms</Aliases>
            </ReferencePath>
        </ItemGroup>
    </Target>
    <!-- Run Constructor.csx on the project for Windows. -->
    <Target Name="RunConstructorTests" AfterTargets="PostBuildEvent" Condition="'$(OS)' == 'Windows_NT' and $(NoTests) != 'true'">
        <Exec Command="where -q csharprepl || dotnet tool install -g csharprepl&#xA;csharprepl $([System.IO.Path]::GetFullPath('$(Morsels)/Tests/Constructors.csx')) -- $(OutDir)$(AssemblyName).dll" ContinueOnError="false" IgnoreExitCode="true"/>
    </Target>
    <!-- Run Constructor.csx on the project for Mac or Linux. -->
    <Target Name="RunConstructorTests" AfterTargets="PostBuildEvent" Condition="'$(OS)' != 'Windows_NT' and $(NoTests) != 'true'">
        <Exec Command="command -v csharprepl &gt;/dev/null 2&gt;&amp;1 || dotnet tool install -g csharprepl&#xA;csharprepl $([System.IO.Path]::GetFullPath('$(Morsels)/Tests/Constructors.csx')) -- $(OutDir)$(AssemblyName).dll" ContinueOnError="false" IgnoreExitCode="true"/>
    </Target>
    <!-- Copy index file to make Documentation folder nicer in GitHub for Windows. -->
    <Target Name="CopyMarkdownIndex" AfterTargets="PostBuildEvent" Condition="'$(OS)' == 'Windows_NT' and $(DisableDefaultDocumentation) != 'true' and Exists('$(MarkdownIndexFilePath)')">
        <Exec Command="xcopy &quot;$(MarkdownIndexFilePath)&quot; &quot;$(ProjectDir)Documentation/README.md&quot;"/>
    </Target>
    <!-- Copy index file to make Documentation folder nicer in GitHub for Mac or Linux. -->
    <Target Name="CopyMarkdownIndex" AfterTargets="PostBuildEvent" Condition="'$(OS)' != 'Windows_NT' and $(DisableDefaultDocumentation) != 'true' and Exists('$(MarkdownIndexFilePath)')">
        <Exec Command="cp &quot;$(MarkdownIndexFilePath)&quot; &quot;$(ProjectDir)Documentation/README.md&quot;"/>
    </Target>
    <!-- Copy files to Keep Talking and Nobody Explodes Modkit repository from Windows. -->
    <Target Name="CopyToDestination" AfterTargets="PostBuildEvent" Condition="'$(OS)' == 'Windows_NT' and '$(TargetFramework)' == 'net35' and $(Destination) != ''">
        <Exec Command="xcopy $(Out) &quot;$(Destination)&quot;&#xA;xcopy &quot;$(ProjectDir)$(OutDir)$(AssemblyName).xml&quot; &quot;$(Destination)&quot;&#xA;xcopy &quot;$(ProjectDir)$(OutDir)$(AssemblyName).pdb&quot; &quot;$(Destination)&quot;"/>
    </Target>
    <!-- Copy files to Keep Talking and Nobody Explodes Modkit repository from Mac or Linux. -->
    <Target Name="CopyToDestination" AfterTargets="PostBuildEvent" Condition="'$(OS)' != 'Windows_NT' and '$(TargetFramework)' == 'net35' and $(Destination) != ''">
        <Exec Command="cp $(Out) &quot;$(Destination)&quot;&#xA;cp &quot;$(ProjectDir)$(OutDir)$(AssemblyName).xml&quot; &quot;$(Destination)&quot;&#xA;cp &quot;$(ProjectDir)$(OutDir)$(AssemblyName).pdb&quot; &quot;$(Destination)&quot;"/>
    </Target>
    <!-- We only need to validate the properties that are being used. -->
    <Target Name="ValidateLocalProperties" BeforeTargets="PreBuildEvent">
        <Error Condition="'$(Morsels)' == ''" Text="Emik.Morsels link missing. Copy the template Emik.Morsels.local.props.template and rename it to Emik.Morsels.local.props and fill each tag with the respective directories on your local system. The folder to Emik.Morsels should be specified by having an Emik.Morsels.local.props file within or above the directories of this project." HelpLink="https://github.com/Emik03/Emik.Morsels#usage"/>
        <Error Condition="'$(IsKtane)' == 'true' and '$(Unity)' == ''" Text="Unity link missing. Copy the template Emik.Morsels.local.props.template and rename it to Emik.Morsels.local.props and fill each tag with the respective directories on your local system. The folder to Unity should be specified by having an Emik.Morsels.local.props file within or above the directories of this project." HelpLink="https://github.com/Emik03/Emik.Morsels#usage"/>
        <Error Condition="'$(IsCeleste)' == 'true' and '$(Celeste)' == ''" Text="Celeste link missing. Copy the template Emik.Morsels.local.props.template and rename it to Emik.Morsels.local.props and fill each tag with the respective directories on your local system. The folder to Celeste should be specified by having an Emik.Morsels.local.props file within or above the directories of this project." HelpLink="https://github.com/Emik03/Emik.Morsels#usage"/>
        <Error Condition="'$(IsKtane)' == 'true' and '$(Ktane)' == ''" Text="Keep Talking and Nobody Explodes link missing. Copy the template Emik.Morsels.local.props.template and rename it to Emik.Morsels.local.props and fill each tag with the respective directories on your local system. The folder to Keep Talking and Nobody Explodes should be specified by having an Emik.Morsels.local.props file within or above the directories of this project." HelpLink="https://github.com/Emik03/Emik.Morsels#usage"/>
    </Target>
</Project>
