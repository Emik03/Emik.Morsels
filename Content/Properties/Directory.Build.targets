<!-- SPDX-License-Identifier: MPL-2.0 -->
<Project>
    <!-- Use all compatible Fody projects for C# in .NET Framework 2.0 - 3.5. -->
    <PropertyGroup Condition="'$(WeaverConfiguration)' == '' and '$(MSBuildProjectExtension)' == '.csproj' and $([MSBuild]::IsTargetFrameworkCompatible('$(TargetFramework)', 'net20')) and !$([MSBuild]::IsTargetFrameworkCompatible('$(TargetFramework)', 'net40'))">
        <WeaverConfiguration>
            <Weavers>
                <Equals/>
                <InfoOf/>
                <InlineIL/>
                <ToString/>
                <NullGuard/>
                <Substitute/>
                <Virtuosity/>
                <PrecompiledRegex/>
                <LocalsInit Default="false"/>
                <Caseless StringComparison="Ordinal"/>
                <ILMerge CompactMode="true" IncludeAssemblies="^(?:CommunityToolkit)|(?:Serilog)(?:(?!\.)|\..)"/>
                <InlineMethod/>
                <Divorce/>
                <Absence Except="Serilog.Core.LoggingLevelSwitchChangedEventArgs Serilog.Events.LogEventLevel"/>
            </Weavers>
        </WeaverConfiguration>
    </PropertyGroup>
    <!-- Use all compatible Fody projects for C# in .NET Framework 4.0. -->
    <PropertyGroup>
        <WeaverConfiguration Condition="'$(WeaverConfiguration)' == '' and '$(MSBuildProjectExtension)' == '.csproj' and $([MSBuild]::IsTargetFrameworkCompatible('$(TargetFramework)', 'net40')) and !$([MSBuild]::IsTargetFrameworkCompatible('$(TargetFramework)', 'net45'))">
            <Weavers>
                <Lazy/>
                <Equals/>
                <InfoOf/>
                <InlineIL/>
                <ToString/>
                <NullGuard/>
                <Substitute/>
                <Virtuosity/>
                <PrecompiledRegex/>
                <LocalsInit Default="false"/>
                <Caseless StringComparison="Ordinal"/>
                <ILMerge CompactMode="true" IncludeAssemblies="^(?:CommunityToolkit)|(?:Serilog)(?:(?!\.)|\..)"/>
                <InlineMethod/>
                <Absence Except="Serilog.Core.LoggingLevelSwitchChangedEventArgs Serilog.Events.LogEventLevel"/>
            </Weavers>
        </WeaverConfiguration>
    </PropertyGroup>
    <!-- Use all compatible Fody projects for C# in .NET Framework 4.5+ and .NET Standard 2.0+. -->
    <PropertyGroup Condition="'$(WeaverConfiguration)' == '' and '$(MSBuildProjectExtension)' == '.csproj' and ($([MSBuild]::IsTargetFrameworkCompatible('$(TargetFramework)', 'net45')) or $([MSBuild]::IsTargetFrameworkCompatible('$(TargetFramework)', 'netstandard2.0')))">
        <WeaverConfiguration>
            <Weavers>
                <Lazy/>
                <Equals/>
                <InfoOf/>
                <InlineIL/>
                <ToString/>
                <NullGuard/>
                <Substitute/>
                <Virtuosity/>
                <PrecompiledRegex/>
                <LocalsInit Default="false"/>
                <Caseless StringComparison="Ordinal"/>
                <ConfigureAwait ContinueOnCapturedContext="false"/>
                <ILMerge CompactMode="true" IncludeAssemblies="^(?:CommunityToolkit)|(?:Serilog)(?:(?!\.)|\..)"/>
                <InlineMethod/>
                <Absence Except="Serilog.Core.LoggingLevelSwitchChangedEventArgs Serilog.Events.LogEventLevel"/>
            </Weavers>
        </WeaverConfiguration>
    </PropertyGroup>
    <!-- Use all compatible Fody projects for C# in .NET Standard 1.0 - 1.6. -->
    <PropertyGroup Condition="'$(WeaverConfiguration)' == '' and '$(MSBuildProjectExtension)' == '.csproj' and $([MSBuild]::IsTargetFrameworkCompatible('$(TargetFramework)', 'netstandard1.0')) and !$([MSBuild]::IsTargetFrameworkCompatible('$(TargetFramework)', 'netstandard2.0'))">
        <WeaverConfiguration>
            <Weavers>
                <Lazy/>
                <Equals/>
                <InfoOf/>
                <InlineIL/>
                <NullGuard/>
                <Substitute/>
                <Virtuosity/>
                <PrecompiledRegex/>
                <LocalsInit Default="false"/>
                <ILMerge CompactMode="true" IncludeAssemblies="^(?:CommunityToolkit)|(?:Serilog)(?:(?!\.)|\..)"/>
                <InlineMethod/>
                <Absence Except="Serilog.Core.LoggingLevelSwitchChangedEventArgs Serilog.Events.LogEventLevel"/>
            </Weavers>
        </WeaverConfiguration>
    </PropertyGroup>
    <!-- Use all compatible Fody projects for F# in .NET Framework 2.0 - 3.5. -->
    <PropertyGroup Condition="'$(WeaverConfiguration)' == '' and '$(MSBuildProjectExtension)' == '.fsproj' and $([MSBuild]::IsTargetFrameworkCompatible('$(TargetFramework)', 'net20')) and !$([MSBuild]::IsTargetFrameworkCompatible('$(TargetFramework)', 'net40'))">
        <WeaverConfiguration>
            <Weavers>
                <Equals/>
                <InfoOf/>
                <InlineIL/>
                <ToString/>
                <Substitute/>
                <Virtuosity/>
                <PrecompiledRegex/>
                <LocalsInit Default="false"/>
                <Caseless StringComparison="Ordinal"/>
                <ILMerge CompactMode="true" IncludeAssemblies="^(?:CommunityToolkit)|(?:Serilog)(?:(?!\.)|\..)"/>
                <InlineMethod/>
                <Divorce/>
                <Absence Except="Serilog.Core.LoggingLevelSwitchChangedEventArgs Serilog.Events.LogEventLevel"/>
            </Weavers>
        </WeaverConfiguration>
    </PropertyGroup>
    <!-- Use all compatible Fody projects for F# in .NET Framework 4.0. -->
    <PropertyGroup>
        <WeaverConfiguration Condition="'$(WeaverConfiguration)' == '' and '$(MSBuildProjectExtension)' == '.fsproj' and $([MSBuild]::IsTargetFrameworkCompatible('$(TargetFramework)', 'net40')) and !$([MSBuild]::IsTargetFrameworkCompatible('$(TargetFramework)', 'net45'))">
            <Weavers>
                <Lazy/>
                <Equals/>
                <InfoOf/>
                <InlineIL/>
                <ToString/>
                <Substitute/>
                <Virtuosity/>
                <PrecompiledRegex/>
                <LocalsInit Default="false"/>
                <Caseless StringComparison="Ordinal"/>
                <ILMerge CompactMode="true" IncludeAssemblies="^(?:CommunityToolkit)|(?:Serilog)(?:(?!\.)|\..)"/>
                <InlineMethod/>
                <Absence Except="Serilog.Core.LoggingLevelSwitchChangedEventArgs Serilog.Events.LogEventLevel"/>
            </Weavers>
        </WeaverConfiguration>
    </PropertyGroup>
    <!-- Use all compatible Fody projects for F# in .NET Framework 4.5+ and .NET Standard 2.0+. -->
    <PropertyGroup Condition="'$(WeaverConfiguration)' == '' and '$(MSBuildProjectExtension)' == '.fsproj' and ($([MSBuild]::IsTargetFrameworkCompatible('$(TargetFramework)', 'net45')) or $([MSBuild]::IsTargetFrameworkCompatible('$(TargetFramework)', 'netstandard2.0')))">
        <WeaverConfiguration>
            <Weavers>
                <Lazy/>
                <Equals/>
                <InfoOf/>
                <InlineIL/>
                <ToString/>
                <Substitute/>
                <Virtuosity/>
                <PrecompiledRegex/>
                <LocalsInit Default="false"/>
                <Caseless StringComparison="Ordinal"/>
                <ConfigureAwait ContinueOnCapturedContext="false"/>
                <ILMerge CompactMode="true" IncludeAssemblies="^(?:CommunityToolkit)|(?:Serilog)(?:(?!\.)|\..)"/>
                <InlineMethod/>
                <Absence Except="Serilog.Core.LoggingLevelSwitchChangedEventArgs Serilog.Events.LogEventLevel"/>
            </Weavers>
        </WeaverConfiguration>
    </PropertyGroup>
    <!-- Use all compatible Fody projects for F# in .NET Standard 1.0 - 1.6. -->
    <PropertyGroup Condition="'$(WeaverConfiguration)' == '' and '$(MSBuildProjectExtension)' == '.fsproj' and $([MSBuild]::IsTargetFrameworkCompatible('$(TargetFramework)', 'netstandard1.0')) and !$([MSBuild]::IsTargetFrameworkCompatible('$(TargetFramework)', 'netstandard2.0'))">
        <WeaverConfiguration>
            <Weavers>
                <Lazy/>
                <Equals/>
                <InfoOf/>
                <InlineIL/>
                <Substitute/>
                <Virtuosity/>
                <PrecompiledRegex/>
                <LocalsInit Default="false"/>
                <ILMerge CompactMode="true" IncludeAssemblies="^(?:CommunityToolkit)|(?:Serilog)(?:(?!\.)|\..)"/>
                <InlineMethod/>
                <Absence Except="Serilog.Core.LoggingLevelSwitchChangedEventArgs Serilog.Events.LogEventLevel"/>
            </Weavers>
        </WeaverConfiguration>
    </PropertyGroup>
    <!-- Properties for wawa projects. -->
    <PropertyGroup Condition="$(AssemblyName.StartsWith(&quot;wawa.&quot;))">
        <IsKtane>true</IsKtane>
        <NoTests>true</NoTests>
        <NoWarn>$(NoWarn);419</NoWarn>
        <FileVersion>4.7.2</FileVersion>
        <Nullable>annotations</Nullable>
        <CopyrightSince>2022</CopyrightSince>
        <DefineConstants>$(DefineConstants);WAWA</DefineConstants>
        <WeaverConfiguration>
            <Weavers>
                <Equals/>
                <InfoOf/>
                <InlineIL/>
                <ToString/>
                <NullGuard Mode="Implicit"/>
                <Substitute/>
                <Virtuosity/>
                <PrecompiledRegex/>
                <LocalsInit Default="false"/>
                <Caseless StringComparison="Ordinal"/>
                <ILMerge CompactMode="true" IncludeAssemblies="^(?:CommunityToolkit)|(?:Serilog)(?:(?!\.)|\..)"/>
                <InlineMethod/>
                <Divorce/>
                <Absence Except="Serilog.Core.LoggingLevelSwitchChangedEventArgs Serilog.Events.LogEventLevel"/>
            </Weavers>
        </WeaverConfiguration>
    </PropertyGroup>
    <!-- Common and/or default values that reference values in Directory.Build.props. -->
    <PropertyGroup>
        <Title>$(AssemblyName)</Title>
        <Version>$(FileVersion)</Version>
        <AssemblyVersion>$(FileVersion)</AssemblyVersion>
        <Out>&quot;$(OutDir)$(AssemblyName).dll&quot;</Out>
        <InformationalVersion>$(FileVersion)</InformationalVersion>
        <MarkdownIndexFilePath>$(ProjectDir)Documentation/index.md</MarkdownIndexFilePath>
        <PackageProjectUrl Condition="'$(PackageProjectUrl)' == ''">$(RepositoryUrl)</PackageProjectUrl>
        <DefaultDocumentationPlugins>$(Morsels)/References/Emik.DefaultDocumentation.dll</DefaultDocumentationPlugins>
        <DefineConstants Condition="'$(IsKtane)' == 'true'">$(DefineConstants);KTANE;NO_SYSTEM_MEMORY</DefineConstants>
        <RootNamespace Condition="'$(RootNamespace)' == ''">$(AssemblyName.Substring(0, 1).ToUpper())$(AssemblyName.Substring(1))</RootNamespace>
        <Copyright Condition="$(CopyrightSince) != ''">Copyright © Emik $(CopyrightSince) - $([System.DateTime]::Now.ToString('yyyy'))</Copyright>
        <DefineConstants Condition="'$(IsCeleste)' == 'true' and !$([MSBuild]::IsTargetFrameworkCompatible('$(TargetFramework)', 'netstandard1.3'))">$(DefineConstants);NO_READONLY_STRUCTS;NO_SYSTEM_MEMORY</DefineConstants>
    </PropertyGroup>
    <!-- The file 'index.md' may not necessarily exist. In which case the assembly name is probably used. -->
    <PropertyGroup Condition="!Exists('$(MarkdownIndexFilePath)')">
        <MarkdownIndexFilePath>$(ProjectDir)Documentation/$(AssemblyName).md</MarkdownIndexFilePath>
    </PropertyGroup>
    <!-- This is for assemblies whose first letter is lowercase, where namespaces are uppercase instead. -->
    <PropertyGroup Condition="!Exists('$(MarkdownIndexFilePath)')">
        <MarkdownIndexFilePath>$(ProjectDir)Documentation/$(RootNamespace).md</MarkdownIndexFilePath>
    </PropertyGroup>
    <!-- Reference weaved reference dll's from Emik.Morsels. -->
    <PropertyGroup Condition="$([MSBuild]::IsTargetFrameworkCompatible('$(TargetFramework)', 'net20')) and !$([MSBuild]::IsTargetFrameworkCompatible('$(TargetFramework)', 'net40'))">
        <AssemblySearchPaths>$(Morsels)/References/;$(AssemblySearchPaths)</AssemblySearchPaths>
    </PropertyGroup>
    <!-- Properties for Roslyn analyzer projects. -->
    <PropertyGroup Condition="($(AssemblyName.Contains(&quot;Analyzer&quot;)) or $(AssemblyName.Contains(&quot;SourceGenerator&quot;))) and !$(AssemblyName.EndsWith(&quot;.Tests&quot;))">
        <NoTests>true</NoTests>
        <IncludeBuildOutput>false</IncludeBuildOutput>
        <DefineConstants>$(DefineConstants);ROSLYN</DefineConstants>
        <DisableDefaultDocumentation>true</DisableDefaultDocumentation>
        <EnforceExtendedAnalyzerRules>true</EnforceExtendedAnalyzerRules>
        <NoWarn>$(NoWarn);AsyncifyInvocation;CS0419;CS1574;CS1580;CS3001;CS3002;CS3003;CS3009;CS3024;CS8601;CS8604;CS8669;CS8767;CS9124</NoWarn>
    </PropertyGroup>
    <!-- Properties for Unit Test projects. -->
    <PropertyGroup Condition="$(AssemblyName.EndsWith(&quot;.Tests&quot;))">
        <IsPackable>false</IsPackable>
        <DisableDefaultDocumentation>true</DisableDefaultDocumentation>
        <DefineConstants>$(DefineConstants);UNIT_TESTS</DefineConstants>
        <NoWarn>$(NoWarn);CA1707;CS1591;CS1595;MA0048;NUnit2005;SA1600;SA1649</NoWarn>
    </PropertyGroup>
    <!-- Use separate copy of Celeste if one is specified. -->
    <PropertyGroup Condition="$(CelesteLegacy) != '' and !$([MSBuild]::IsTargetFrameworkCompatible('$(TargetFramework)', 'netstandard1.3'))">
        <Celeste>$(CelesteLegacy)</Celeste>
    </PropertyGroup>
    <!-- Show implicitly added files on Solution Explorer. -->
    <ItemGroup>
        <None Remove="Documentation/**"/>
        <None Remove="$(AssemblyName).Tests/**"/>
        <Compile Remove="$(AssemblyName).Tests/**"/>
        <PackageReference Remove="$(AssemblyName)"/>
        <None Remove="$(AssemblyName).Generated.Tests/**"/>
        <Compile Remove="$(AssemblyName).Generated.Tests/**"/>
        <EditorConfigFiles Remove="$(AssemblyName).Tests/**"/>
        <EditorConfigFiles Remove="$(AssemblyName).Generated.Tests/**"/>
        <PackageReference Condition="$(AssemblyName.EndsWith(&quot;.Fody&quot;))" Include="FodyHelpers" Version="6.7.0"/>
        <PackageReference Condition="$(DisableDefaultDocumentation) != 'true'" Include="DefaultDocumentation" Version="0.8.3-beta1" PrivateAssets="all"/>
        <Compile Condition="'$(MSBuildProjectExtension)' != '.csproj' or !$(AssemblyName.EndsWith(&quot;.Tests&quot;))" Remove="$(Morsels)/Compile/Source/References/NUnit/**/*.cs"/>
        <Compile Condition="(!$(AssemblyName.Contains(&quot;Analyzer&quot;)) and !$(AssemblyName.Contains(&quot;SourceGenerator&quot;))) or $(AssemblyName.EndsWith(&quot;.Tests&quot;))" Remove="$(Morsels)/Compile/**/Roslyn/**"/>
        <PackageReference Condition="!$(DefineConstants.Contains('NO_SYSTEM_MEMORY')) and !$(AssemblyName.Contains(&quot;Analyzer&quot;)) and !$(AssemblyName.Contains(&quot;SourceGenerator&quot;)) and '$(TargetFramework)' != 'netstandard2.1' and $([MSBuild]::IsTargetFrameworkCompatible('$(TargetFramework)', 'netstandard1.1')) and !$([MSBuild]::IsTargetFrameworkCompatible('$(TargetFramework)', 'netcoreapp2.1'))" Include="System.Memory" Version="4.5.5" PrivateAssets="all"/>
    </ItemGroup>
    <!-- Celeste references. -->
    <ItemGroup Condition="'$(IsCeleste)' == 'true'">
        <PackageReference Remove="Emik.SourceGenerators.Tattoo"/>
        <PackageReference Remove="FastGenericNew.SourceGenerator"/>
        <Reference Include="DotNetZip" HintPath="$(Celeste)/DotNetZip.dll" Private="false"/>
        <Reference Include="YamlDotNet" HintPath="$(Celeste)/YamlDotNet.dll" Private="false"/>
        <Reference Include="MonoMod.Utils" HintPath="$(Celeste)/MonoMod.Utils.dll" Private="false"/>
        <Reference Include="MMHOOK_Celeste" HintPath="$(Celeste)/MMHOOK_Celeste.dll" Private="false"/>
        <Reference Condition="Exists('$(Celeste)/FNA.dll') and $([MSBuild]::IsTargetFrameworkCompatible('$(TargetFramework)', 'netcoreapp'))" Include="FNA" HintPath="$(Celeste)/FNA.dll" Private="false"/>
        <Reference Condition="Exists('$(Celeste)/Celeste.dll') and $([MSBuild]::IsTargetFrameworkCompatible('$(TargetFramework)', 'netcoreapp'))" Include="Celeste" HintPath="$(Celeste)/Celeste.dll" Private="false"/>
        <Reference Condition="Exists('$(Celeste)/Celeste.exe') and $([MSBuild]::IsTargetFrameworkCompatible('$(TargetFramework)', 'netframework'))" Include="Celeste" HintPath="$(Celeste)/Celeste.exe" Private="false"/>
        <Reference Condition="Exists('$(Celeste)/Celeste.Mod.mm.dll') and $([MSBuild]::IsTargetFrameworkCompatible('$(TargetFramework)', 'netframework'))" Include="Celeste.Mod" HintPath="$(Celeste)/Celeste.Mod.mm.dll" Private="false"/>
    </ItemGroup>
    <!-- Keep Talking and Nobody Explodes references, specifying paths to self-made dependencies to support System.Type.op_Equality. -->
    <ItemGroup Condition="'$(IsKtane)' == 'true'">
        <PackageReference Include="UnityEngineAnalyzer" Version="1.0.0" PrivateAssets="all"/>
        <Reference Include="KMFramework" HintPath="$(Ktane)/ktane_Data/Managed/KMFramework.dll" Private="false"/>
        <Reference Include="UnityEditor" HintPath="$(Unity)/Editor/Data/Managed/UnityEditor.dll" Private="false"/>
        <Reference Include="UnityEngine" HintPath="$(Unity)/Editor/Data/Managed/UnityEngine.dll" Private="false"/>
        <Reference Include="Newtonsoft.Json" HintPath="$(Ktane)/ktane_Data/Managed/Newtonsoft.Json.dll" Private="false"/>
        <Reference Condition="'$(MSBuildProjectExtension)' != '.fsproj'" Include="Assembly-CSharp" HintPath="$(Ktane)/ktane_Data/Managed/Assembly-CSharp.dll" Private="false"/>
        <Reference Condition="'$(UseUnityCoreModule)' == 'true'" Include="UnityEngine.CoreModule" Private="false" HintPath="$(Unity)/Editor/Data/Managed/UnityEngine/UnityEngine.CoreModule.dll"/>
    </ItemGroup>
    <!-- Roslyn analyzer references. -->
    <ItemGroup Condition="($(AssemblyName.Contains(&quot;Analyzer&quot;)) or $(AssemblyName.Contains(&quot;SourceGenerator&quot;))) and !$(AssemblyName.EndsWith(&quot;.Tests&quot;))">
        <PackageReference Include="Gu.Analyzers" Version="2.0.3" PrivateAssets="all"/>
        <PackageReference Include="Gu.Roslyn.Extensions.Source" Version="0.17.1" PrivateAssets="all"/>
        <None Include="$(OutputPath)/$(AssemblyName).dll" Pack="true" PackagePath="analyzers/dotnet/cs" Visible="false"/>
    </ItemGroup>
    <!-- Reference roslyn analyzer from above onto tests. -->
    <ItemGroup Condition="($(AssemblyName.Contains(&quot;Analyzer&quot;)) or $(AssemblyName.Contains(&quot;SourceGenerator&quot;))) and $(AssemblyName.EndsWith(&quot;.Tests&quot;))">
        <ProjectReference Include="../*.csproj" OutputItemType="Analyzer" ReferenceOutputAssembly="false" PrivateAssets="all"/>
        <ProjectReference Include="../*.fsproj" OutputItemType="Analyzer" ReferenceOutputAssembly="false" PrivateAssets="all"/>
    </ItemGroup>
    <!-- References for Unit Test projects. Unit Tests are auto-generated; do not use most polyfills. -->
    <ItemGroup Condition="$(AssemblyName.EndsWith(&quot;.Tests&quot;))">
        <PackageReference Remove="GlobalUsingsAnalyzer"/>
        <ProjectReference Include="../*.csproj" PrivateAssets="all"/>
        <ProjectReference Include="../*.fsproj" PrivateAssets="all"/>
        <PackageReference Include="coverlet.collector" Version="6.0.2" PrivateAssets="all"/>
        <PackageReference Include="Microsoft.NET.Test.Sdk" Version="17.10.0" PrivateAssets="all"/>
        <PackageReference Condition="'$(UseNUnit)' != 'true'" Include="xunit" Version="2.8.1" PrivateAssets="all"/>
        <PackageReference Condition="'$(UseNUnit)' == 'true'" Include="NUnit" Version="4.0.1" PrivateAssets="all"/>
        <PackageReference Condition="'$(UseNUnit)' == 'true'" Include="NUnit" Version="4.0.1" PrivateAssets="all"/>
        <PackageReference Condition="'$(UseNUnit)' == 'true'" Include="NUnit.Analyzers" Version="3.10.0" PrivateAssets="all"/>
        <PackageReference Condition="'$(UseNUnit)' == 'true'" Include="NUnit3TestAdapter" Version="4.5.0" PrivateAssets="all"/>
        <PackageReference Condition="'$(UseNUnit)' != 'true'" Include="xunit.runner.console" Version="2.8.1" PrivateAssets="all"/>
        <PackageReference Condition="'$(UseNUnit)' != 'true'" Include="xunit.runner.visualstudio" Version="2.8.1" PrivateAssets="all"/>
    </ItemGroup>
    <!-- Item groups for wawa projects. -->
    <ItemGroup Condition="$(AssemblyName.StartsWith(&quot;wawa.&quot;))">
        <Compile Include="$(Morsels)/Compile/Source/References/Fody/AllowNullAttribute.cs" Link="Source/References/Fody/AllowNullAttribute.cs"/>
        <Compile Include="$(Morsels)/Compile/Source/References/Fody/NullGuardAttribute.cs" Link="Source/References/Fody/NullGuardAttribute.cs"/>
        <Compile Include="$(Morsels)/Compile/Source/References/System/Diagnostics/Attributes.cs" Link="Source/References/System/Diagnostics/Attributes.cs"/>
    </ItemGroup>
    <!-- Remove the template if all necessary item groups are filled. -->
    <ItemGroup Condition="'$(Morsels)' != '' and ('$(IsCeleste)' != 'true' or '$(Celeste)') != '' and ('$(IsKtane)' != 'true' or '$(Unity)' != '')">
        <Content Remove="$(Morsels)/Content/Properties/Directory.Build.local.props.template"/>
        <AdditionalFiles Remove="$(Morsels)/Content/Properties/Directory.Build.local.props.template"/>
    </ItemGroup>
    <!-- Hides any file that contains ".g.", which implies that it is auto-generated. -->
    <Target Name="HideAutoGeneratedFiles" BeforeTargets="Compile">
        <ItemGroup>
            <Compile Condition="$([System.Text.RegularExpressions.Regex]::IsMatch('%(FileName)%(Extension)', '^.*\.g\..*$'))" Visible="false"/>
        </ItemGroup>
    </Target>
    <!-- Allows PackageReferences to be tagged with 'Aliases'. -->
    <Target Name="AddPackageAliases" BeforeTargets="ResolveReferences" Outputs="%(PackageReference.Identity)">
        <PropertyGroup>
            <AliasName>@(PackageReference->'%(Alias)')</AliasName>
            <AliasPackageReference>@(PackageReference->'%(Identity)')</AliasPackageReference>
        </PropertyGroup>
        <ItemGroup>
            <ReferencePath Condition="'%(FileName)' == '$(AliasPackageReference)'">
                <Aliases>$(AliasName)</Aliases>
            </ReferencePath>
        </ItemGroup>
    </Target>
    <!-- Allows specific libraries to have a distinct alias. -->
    <Target Name="ChangeAliasesOfStrongNameAssemblies" BeforeTargets="FindReferenceAssembliesForReferences;ResolveReferences">
        <ItemGroup>
            <ReferencePath Condition="'%(FileName)' == 'mscorlib'">
                <Aliases>global, ms</Aliases>
            </ReferencePath>
            <ReferencePath Condition="'%(FileName)' == 'UnityEngine'">
                <Aliases>global, unity</Aliases>
            </ReferencePath>
            <ReferencePath Condition="'%(FileName)' == 'UnityEngine.CoreModule'">
                <Aliases>core</Aliases>
            </ReferencePath>
        </ItemGroup>
    </Target>
    <!-- Run Constructor.csx on the project for Windows. -->
    <Target Name="RunConstructorTests" Condition="'$(OS)' == 'Windows_NT' and $(NoTests) != 'true' and '$(RebuildingWithoutJetBrainsAnnotations)' != 'true'">
        <Exec Command="where -q dotnet-script || dotnet tool install -g dotnet-script&#xA;type $([System.IO.Path]::GetFullPath('$(Morsels)/Snippets/Constructors.csx')) | dotnet-script eval -- $(IntermediateOutputPath)$(AssemblyName).dll" IgnoreExitCode="true"/>
    </Target>
    <!-- Run Constructor.csx on the project for Mac or Linux. -->
    <Target Name="RunConstructorTests" Condition="'$(OS)' != 'Windows_NT' and $(NoTests) != 'true' and '$(RebuildingWithoutJetBrainsAnnotations)' != 'true'">
        <Exec Command="command -v dotnet-script &gt;/dev/null 2&gt;&amp;1 || dotnet tool install -g dotnet-script&#xA;cat $([System.IO.Path]::GetFullPath('$(Morsels)/Snippets/Constructors.csx')) | dotnet-script eval -- $(IntermediateOutputPath)$(AssemblyName).dll" IgnoreExitCode="true"/>
    </Target>
    <!-- Copy index file to make Documentation folder nicer in GitHub for Windows. -->
    <Target Name="CopyMarkdownIndex" AfterTargets="PostBuildEvent" Condition="'$(OS)' == 'Windows_NT' and $(DisableDefaultDocumentation) != 'true' and Exists('$(MarkdownIndexFilePath)') and '$(RebuildingWithoutJetBrainsAnnotations)' == 'true'">
        <Exec Command="xcopy &quot;$(MarkdownIndexFilePath)&quot; &quot;$(ProjectDir)Documentation/README.md&quot;"/>
    </Target>
    <!-- Copy index file to make Documentation folder nicer in GitHub for Mac or Linux. -->
    <Target Name="CopyMarkdownIndex" AfterTargets="PostBuildEvent" Condition="'$(OS)' != 'Windows_NT' and $(DisableDefaultDocumentation) != 'true' and Exists('$(MarkdownIndexFilePath)') and '$(RebuildingWithoutJetBrainsAnnotations)' == 'true'">
        <Exec Command="cp &quot;$(MarkdownIndexFilePath)&quot; &quot;$(ProjectDir)Documentation/README.md&quot;"/>
    </Target>
    <!-- Copy files to Keep Talking and Nobody Explodes Modkit repository from Windows. -->
    <Target Name="CopyToDestination" AfterTargets="PostBuildEvent" Condition="'$(OS)' == 'Windows_NT' and '$(TargetFramework)' == 'net35' and $(Destination) != '' and ('$(RebuildingWithoutJetBrainsAnnotations)' == 'true' or '$(MSBuildProjectExtension)' == '.fsproj')">
        <Exec Command="xcopy $(Out) &quot;$(Destination)&quot;"/>
        <Exec Command="xcopy &quot;$(OutDir)$(AssemblyName).xml&quot; &quot;$(Destination)&quot;"/>
        <Exec Command="xcopy &quot;$(OutDir)$(AssemblyName).pdb&quot; &quot;$(Destination)&quot;" IgnoreExitCode="true"/>
    </Target>
    <!-- Copy files to Keep Talking and Nobody Explodes Modkit repository from Mac or Linux. -->
    <Target Name="CopyToDestination" AfterTargets="PostBuildEvent" Condition="'$(OS)' != 'Windows_NT' and '$(TargetFramework)' == 'net35' and $(Destination) != '' and ('$(RebuildingWithoutJetBrainsAnnotations)' == 'true' or '$(MSBuildProjectExtension)' == '.fsproj')">
        <Exec Command="cp $(Out) &quot;$(Destination)&quot;"/>
        <Exec Command="cp &quot;$(OutDir)$(AssemblyName).xml&quot; &quot;$(Destination)&quot;"/>
        <Exec Command="cp &quot;$(OutDir)$(AssemblyName).pdb&quot; &quot;$(Destination)&quot;" IgnoreExitCode="true"/>
    </Target>
    <!-- We only need to validate the properties that are being used. -->
    <Target Name="ValidateLocalProperties" BeforeTargets="PreBuildEvent">
        <Error Condition="'$(Morsels)' == ''" Text="Emik.Morsels link missing. Copy the template Emik.Morsels.local.props.template and rename it to Emik.Morsels.local.props and fill each tag with the respective directories on your local system. The folder to Emik.Morsels should be specified by having an Emik.Morsels.local.props file within or above the directories of this project." HelpLink="https://github.com/Emik03/Emik.Morsels#usage"/>
        <Error Condition="'$(IsKtane)' == 'true' and '$(Unity)' == ''" Text="Unity link missing. Copy the template Emik.Morsels.local.props.template and rename it to Emik.Morsels.local.props and fill each tag with the respective directories on your local system. The folder to Unity should be specified by having an Emik.Morsels.local.props file within or above the directories of this project." HelpLink="https://github.com/Emik03/Emik.Morsels#usage"/>
        <Error Condition="'$(IsCeleste)' == 'true' and '$(Celeste)' == ''" Text="Celeste link missing. Copy the template Emik.Morsels.local.props.template and rename it to Emik.Morsels.local.props and fill each tag with the respective directories on your local system. The folder to Celeste should be specified by having an Emik.Morsels.local.props file within or above the directories of this project." HelpLink="https://github.com/Emik03/Emik.Morsels#usage"/>
        <Error Condition="'$(IsKtane)' == 'true' and '$(Ktane)' == ''" Text="Keep Talking and Nobody Explodes link missing. Copy the template Emik.Morsels.local.props.template and rename it to Emik.Morsels.local.props and fill each tag with the respective directories on your local system. The folder to Keep Talking and Nobody Explodes should be specified by having an Emik.Morsels.local.props file within or above the directories of this project." HelpLink="https://github.com/Emik03/Emik.Morsels#usage"/>
    </Target>
</Project>
