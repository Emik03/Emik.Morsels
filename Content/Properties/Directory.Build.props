<!-- SPDX-License-Identifier: MPL-2.0 -->
<Project>
    <!-- Windows doesn't have $(HOME) set. -->
    <PropertyGroup Condition="'$(HOME)' == ''">
        <HOME>$(USERPROFILE)</HOME>
    </PropertyGroup>
    <!-- Common and/or default values. -->
    <PropertyGroup>
        <Authors>Emik</Authors>
        <Company>Emik</Company>
        <Nullable>enable</Nullable>
        <IsPackable>true</IsPackable>
        <NuGetAudit>true</NuGetAudit>
        <FileVersion>1.0</FileVersion>
        <WarningLevel>4</WarningLevel>
        <AnalysisMode>All</AnalysisMode>
        <OutputType>Library</OutputType>
        <RunAnalyzers>true</RunAnalyzers>
        <LangVersion>preview</LangVersion>
        <Deterministic>true</Deterministic>
        <IsPublishable>true</IsPublishable>
        <NuGetAuditMode>all</NuGetAuditMode>
        <RepositoryType>git</RepositoryType>
        <IncludeSymbols>true</IncludeSymbols>
        <AnalysisLevel>preview</AnalysisLevel>
        <RollForward>LatestMajor</RollForward>
        <RunCodeAnalysis>true</RunCodeAnalysis>
        <TransformOnBuild>false</TransformOnBuild>
        <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
        <PackageId>$(MSBuildProjectName)</PackageId>
        <EnableNETAnalyzers>true</EnableNETAnalyzers>
        <PackageReadmeFile>README.md</PackageReadmeFile>
        <FastNew_PrettyOutput>true</FastNew_PrettyOutput>
        <PublishRepositoryUrl>true</PublishRepositoryUrl>
        <EnablePreviewFeatures>false</EnablePreviewFeatures>
        <Features>$(Features);struct;flow-analysis</Features>
        <OptimizationPreference>speed</OptimizationPreference>
        <TransformOutOfDateOnly>false</TransformOutOfDateOnly>
        <CodeAnalysisForceOutput>true</CodeAnalysisForceOutput>
        <EnablePackageValidation>true</EnablePackageValidation>
        <EnforceCodeStyleInBuild>true</EnforceCodeStyleInBuild>
        <IncludeOpenAPIAnalyzers>true</IncludeOpenAPIAnalyzers>
        <RunAnalyzersDuringBuild>true</RunAnalyzersDuringBuild>
        <GenerateDocumentationFile>true</GenerateDocumentationFile>
        <CheckForOverflowUnderflow>false</CheckForOverflowUnderflow>
        <PackageLicenseExpression>MPL-2.0</PackageLicenseExpression>
        <ContinuousIntegrationBuild>false</ContinuousIntegrationBuild>
        <CopyLocalLockFileAssemblies>true</CopyLocalLockFileAssemblies>
        <DoNotMerge>^(?:(?!(CommunityToolkit)|(ZLinq)).)+$</DoNotMerge>
        <RestorePackagesWithLockFile>true</RestorePackagesWithLockFile>
        <EnforceExtendedAnalyzerRules>true</EnforceExtendedAnalyzerRules>
        <RunAnalyzersDuringLiveAnalysis>true</RunAnalyzersDuringLiveAnalysis>
        <ManagePackageVersionsCentrally>false</ManagePackageVersionsCentrally>
        <PackageRequireLicenseAcceptance>true</PackageRequireLicenseAcceptance>
        <SuppressTfmSupportBuildWarnings>true</SuppressTfmSupportBuildWarnings>
        <ApiCompatGenerateSuppressionFile>true</ApiCompatGenerateSuppressionFile>
        <Copyright>Copyright Â© Emik $([System.DateTime]::Now.ToString('yyyy'))</Copyright>
        <ApiCompatEnableRuleAttributesMustMatch>true</ApiCompatEnableRuleAttributesMustMatch>
        <PathMap>$([System.IO.Path]::GetFullPath('$(MSBuildProjectFullPath)../'))=./</PathMap>
        <GenerateNeutralResourcesLanguageAttribute>true</GenerateNeutralResourcesLanguageAttribute>
        <JsonSerializerIsReflectionEnabledByDefault>false</JsonSerializerIsReflectionEnabledByDefault>
        <ApiCompatEnableRuleCannotChangeParameterName>true</ApiCompatEnableRuleCannotChangeParameterName>
        <ValidateExecutableReferencesMatchSelfContained>true</ValidateExecutableReferencesMatchSelfContained>
        <EnableStrictModeForCompatibleFrameworksInPackage>true</EnableStrictModeForCompatibleFrameworksInPackage>
        <ResolveAssemblyWarnOrErrorOnTargetArchitectureMismatch>none</ResolveAssemblyWarnOrErrorOnTargetArchitectureMismatch>
        <EnableMicrosoftExtensionsConfigurationBinderSourceGenerator>true</EnableMicrosoftExtensionsConfigurationBinderSourceGenerator>
        <SignAssembly Condition="Exists($([MSBuild]::GetPathOfFileAbove('private.snk', '$(MSBuildProjectFullPath)../')))">true</SignAssembly>
        <AssemblyOriginatorKeyFile Condition="Exists($([MSBuild]::GetPathOfFileAbove('private.snk', '$(MSBuildProjectFullPath)../')))">$([MSBuild]::GetPathOfFileAbove('private.snk', '$(MSBuildProjectFullPath)../'))</AssemblyOriginatorKeyFile>
        <NoWarn>
            $(NoWarn);
            AsyncifyInvocation;AsyncifyVariable;
            CS0253;CS0436;CS0809;CS1701;CS1702;CS3019;CS8002;CS8632;CS9192;CS9195;
            AOT0001;AOT0002;
            ASYNC0004;
            CA1000;CA1016;CA1028;CA1034;CA1043;CA1046;CA1055;CA1062;CA1065;CA1066;CA1717;CA1303;CA1305;CA1307;CA1308;CA1309;CA1310;CA1506;CA1515;CA1704;CA1708;CA1709;CA1711;CA1801;CA1812;CA1813;CA1822;CA2000;CA2007;CA2201;CA2204;CA2225;CA2260;CA5394;
            CM0001;
            DOC203;
            GU0009;GU0011;GU0017;GU0073;
            IDE0005;IDE0008;IDE0010;IDE0011;IDE0021;IDE0022;IDE0023;IDE0024;IDE0036;IDE0040;IDE0046;IDE0052;IDE0048;IDE0051;IDE0055;IDE0058;IDE0060;IDE0061;IDE0065;IDE0072;IDE0130;IDE0160;IDE0290;IDE0301;IDE1006;
            IDISP004;IDISP007;IDISP008;
            NETSDK1138;
            MA0001;MA0004;MA0006;MA0007;MA0009;MA0011;MA0023;MA0029;MA0046;MA0048;MA0071;MA0074;MA0076;MA0077;MA0108;MA0143;
            Proj0006;Proj0007;Proj0013;Proj0015;Proj0020;Proj0022;Proj0026;Proj0028;Proj0033;Proj0034;Proj0036;Proj0040;Proj0042;Proj0043;Proj0044;Proj0201;Proj0206;Proj0208;Proj0213;Proj0241;Proj0453;Proj0500;Proj0501;Proj0503;Proj1001;Proj1003;Proj1101;Proj1700;Proj3000;
            S101;S108;S125;S127;S907;S927;S1121;S1125;S1133;S1144;S1168;S1172;S1186;S1199;S1854;S1905;S1939;S1994;S2219;S2328;S2345;S2365;S2479;S2583;S2589;S2692;S2696;S2743;S3011;S3218;S3241;S3261;S3264;S3267;S3358;S3427;S3453;S3604;S3869;S3871;S3877;S3903;S3963;S3973;S4136;S4201;S4275;
            SA0001;SA1000;SA1002;SA1008;SA1009;SA1010;SA1011;SA1012;SA1013;SA1101;SA1111;SA1118;SA1119;SA1122;SA1124;SA1132;SA1133;SA1134;SA1135;SA1200;SA1201;SA1202;SA1205;SA1206;SA1300;SA1305;SA1308;SA1309;SA1311;SA1312;SA1313;SA1400;SA1402;SA1407;SA1408;SA1412;SA1414;SA1500;SA1501;SA1502;SA1503;SA1509;SA1512;SA1513;SA1515;SA1516;SA1519;SA1520;SA1601;SA1609;SA1633;SA1648;SA1649;
            SCA0001;SCA0002;SCA0003;SCA1000;SCA1001;SCA1002;SCA1003;SCA1004;
            NU1701;NU5128;
            NX0001;NX0002;NX0003;
            RCS1001;RCS1003;RCS1080;RCS1084;RCS1085;RCS1123;RCS1163;RCS1169;RCS1194;RCS1213;RCS1233;RCS1242;RCS1247;RCS1259;RCS1263;
            RS1035;
            UEA0006;
            XA0101
        </NoWarn>
    </PropertyGroup>
    <!-- Fallback paths. -->
    <PropertyGroup>
        <Morsels Condition="$(Morsels) == '' and Exists('Emik.Morsels/')">Emik.Morsels/</Morsels>
        <Morsels Condition="$(Morsels) == '' and Exists('../Emik.Morsels/')">../Emik.Morsels/</Morsels>
        <Morsels Condition="$(Morsels) == '' and Exists('../../Emik.Morsels/')">../../Emik.Morsels/</Morsels>
        <AndroidSdkDirectory Condition="Exists('$(HOME)/Android/Sdk/')">$(HOME)/Android/Sdk/</AndroidSdkDirectory>
        <Morsels Condition="$(Morsels) == '' and Exists('../../../Emik.Morsels/')">../../../Emik.Morsels/</Morsels>
        <Morsels Condition="$(Morsels) == '' and Exists('../../../../Emik.Morsels/')">../../../../Emik.Morsels/</Morsels>
        <Morsels Condition="$(Morsels) == '' and Exists('../../../../../Emik.Morsels/')">../../../../../Emik.Morsels/</Morsels>
        <AndroidSdkDirectory Condition="Exists('$(HOME)/Android/android-sdk/')">$(HOME)/Android/android-sdk/</AndroidSdkDirectory>
        <Morsels Condition="$(Morsels) == '' and Exists('../../../../../../Emik.Morsels/')">../../../../../../Emik.Morsels/</Morsels>
        <Morsels Condition="$(Morsels) == '' and Exists('../../../../../../../Emik.Morsels/')">../../../../../../../Emik.Morsels/</Morsels>
        <Morsels Condition="$(Morsels) == '' and Exists('../../../../../../../../Emik.Morsels/')">../../../../../../../../Emik.Morsels/</Morsels>
        <Unity Condition="$(Unity) == '' and Exists('$(HOME)/Unity/Hub/Editor/')">$([System.IO.Directory]::GetDirectories('$(HOME)/Unity/Hub/Editor/')[0])</Unity>
        <Celeste Condition="$(Celeste) == '' and Exists('$(HOME)/.steam/steam/steamapps/common/Celeste/')">$(HOME)/.steam/steam/steamapps/common/Celeste/</Celeste>
        <Unity Condition="$(Unity) == '' and Exists('/Applications/Unity/Hub/Editor/')">$([System.IO.Directory]::GetDirectories('/Applications/Unity/Hub/Editor/')[0])</Unity>
        <Celeste Condition="$(Celeste) == '' and Exists('$(HOME)/.local/share/Steam/steamapps/common/Celeste/')">$(HOME)/.local/share/Steam/steamapps/common/Celeste/</Celeste>
        <RainWorld Condition="$(RainWorld) == '' and Exists('$(HOME)/.steam/steam/steamapps/common/Rain World/')">$(HOME)/.steam/steam/steamapps/common/Rain World/</RainWorld>
        <Celeste Condition="$(Celeste) == '' and Exists('C:\Program Files (x86)\Steam\steamapps\common\Celeste\')">C:\Program Files (x86)\Steam\steamapps\common\Celeste\</Celeste>
        <AndroidSdkDirectory Condition="Exists('$(HOME)/Library/Developer/Xamarin/android-sdk-macosx/')">$(HOME)/Library/Developer/Xamarin/android-sdk-macosx/</AndroidSdkDirectory>
        <Unity Condition="$(Unity) == '' and Exists('C:\Program Files\Unity\Hub\Editor\')">$([System.IO.Directory]::GetDirectories('C:\Program Files\Unity\Hub\Editor\')[0])</Unity>
        <RainWorld Condition="$(RainWorld) == '' and Exists('$(HOME)/.local/share/Steam/steamapps/common/Rain World/')">$(HOME)/.local/share/Steam/steamapps/common/Rain World/</RainWorld>
        <HollowKnight Condition="$(HollowKnight) == '' and Exists('$(HOME)/.steam/steam/steamapps/common/Hollow Knight/')">$(HOME)/.steam/steam/steamapps/common/Hollow Knight/</HollowKnight>
        <RainWorld Condition="$(RainWorld) == '' and Exists('C:\Program Files (x86)\Steam\steamapps\common\Rain World\')">C:\Program Files (x86)\Steam\steamapps\common\Rain World\</RainWorld>
        <Unity Condition="$(Unity) == '' and $([System.IO.Directory]::GetDirectories('$(HOME)', 'Unity-*').Length) != 0">$([System.IO.Directory]::GetDirectories('$(HOME)', 'Unity-*')[0])</Unity>
        <HollowKnight Condition="$(HollowKnight) == '' and Exists('$(HOME)/.local/share/Steam/steamapps/common/Hollow Knight/')">$(HOME)/.local/share/Steam/steamapps/common/Hollow Knight/</HollowKnight>
        <Celeste Condition="$(Celeste) == '' and Exists('$(HOME)/Library/Application Support/Steam/steamapps/common/Celeste/')">$(HOME)/Library/Application Support/Steam/steamapps/common/Celeste/</Celeste>
        <HollowKnight Condition="$(HollowKnight) == '' and Exists('C:\Program Files (x86)\Steam\steamapps\common\Hollow Knight\')">C:\Program Files (x86)\Steam\steamapps\common\Hollow Knight\</HollowKnight>
        <Ktane Condition="$(Ktane) == '' and Exists('$(HOME)/.steam/steam/steamapps/common/Keep Talking and Nobody Explodes/')">$(HOME)/.steam/steam/steamapps/common/Keep Talking and Nobody Explodes/</Ktane>
        <RainWorld Condition="$(RainWorld) == '' and Exists('$(HOME)/Library/Application Support/Steam/steamapps/common/Rain World/')">$(HOME)/Library/Application Support/Steam/steamapps/common/Rain World/</RainWorld>
        <Ktane Condition="$(Ktane) == '' and Exists('$(HOME)/.local/share/Steam/steamapps/common/Keep Talking and Nobody Explodes/')">$(HOME)/.local/share/Steam/steamapps/common/Keep Talking and Nobody Explodes/</Ktane>
        <Ktane Condition="$(Ktane) == '' and Exists('C:\Program Files (x86)\Steam\steamapps\common\Keep Talking and Nobody Explodes\')">C:\Program Files (x86)\Steam\steamapps\common\Keep Talking and Nobody Explodes\</Ktane>
        <HollowKnight Condition="$(HollowKnight) == '' and Exists('$(HOME)/Library/Application Support/Steam/steamapps/common/Hollow Knight/')">$(HOME)/Library/Application Support/Steam/steamapps/common/Hollow Knight/</HollowKnight>
        <Ktane Condition="$(Ktane) == '' and Exists('$(HOME)/Library/Application Support/Steam/steamapps/common/Keep Talking and Nobody Explodes/')">$(HOME)/Library/Application Support/Steam/steamapps/common/Keep Talking and Nobody Explodes/</Ktane>
    </PropertyGroup>
    <!-- The copy command for Windows. -->
    <PropertyGroup Condition="'$(OS)' == 'Windows_NT'">
        <CopyCommand>xcopy</CopyCommand>
    </PropertyGroup>
    <!-- The copy command for Mac/Linux. -->
    <PropertyGroup Condition="'$(OS)' != 'Windows_NT'">
        <CopyCommand>cp</CopyCommand>
    </PropertyGroup>
    <!-- Benchmarks do not like being run from the artifacts path. -->
    <PropertyGroup Condition="!$(MSBuildProjectName.Contains('Benchmark'))">
        <ArtifactsPath>$([System.IO.Path]::GetFullPath('$(MSBuildProjectFullPath)../../artifacts'))</ArtifactsPath>
    </PropertyGroup>
    <!-- Ensure that the path is not relative, escaping all instances of "..", which is necessary if through a symlink. -->
    <PropertyGroup Condition="'$(OS)' != 'Windows_NT' and !$([System.IO.Path]::IsPathRooted('$(Morsels)'))">
        <Morsels>$([System.IO.Path]::GetFullPath('$(MSBuildProjectFullPath)/../$(Morsels)'))</Morsels>
    </PropertyGroup>
    <!-- F# exclusive properties. -->
    <PropertyGroup Condition="'$(MSBuildProjectExtension)' == '.fsproj'">
        <TailCalls>true</TailCalls>
        <DisableImplicitFSharpCoreReference>true</DisableImplicitFSharpCoreReference>
    </PropertyGroup>
    <!-- Sets the icon of the package, if it exists. -->
    <PropertyGroup Condition="Exists('Images/icon.svg')">
        <PackageIcon>icon.svg</PackageIcon>
    </PropertyGroup>
    <!-- Sets the icon of the package, if it exists. -->
    <PropertyGroup Condition="Exists('Images/icon.png')">
        <PackageIcon>icon.png</PackageIcon>
    </PropertyGroup>
    <!-- Set .globalconfig to the proper tag. If it exists above, it is likely symlinked to it and we don't do anything. -->
    <ItemGroup Condition="!Exists($([MSBuild]::GetPathOfFileAbove('.globalconfig', '$(MSBuildProjectFullPath)../')))">
        <AdditionalFiles Remove="$(Morsels)/Content/Properties/.globalconfig"/>
        <GlobalAnalyzerConfigFiles Include="$(Morsels)/Content/Properties/.globalconfig" Link="Properties/.globalconfig"/>
    </ItemGroup>
    <!-- Show implicitly added files on Solution Explorer. -->
    <ItemGroup>
        <AdditionalFiles Include="*.??proj" Visible="false"/>
        <AdditionalFiles Include="$(Morsels)/Content/Properties/**" Link="Properties/**"/>
        <Content Include="$(Morsels)/Content/Properties/**" Link="Properties/**" Pack="false"/>
        <Compile Condition="'$(MSBuildProjectExtension)' == '.csproj'" Include="$(Morsels)/Compile/**/*.cs"/>
        <Compile Condition="'$(MSBuildProjectExtension)' == '.fsproj'" Include="$(Morsels)/Compile/**/*.fs" Link="Emik.Morsels/*.fs"/>
        <None Condition="Exists('Images/icon.png')" Include="Images/icon.png" Link="Images/icon.png" Pack="true" PackagePath="icon.png"/>
        <None Include="$([MSBuild]::GetPathOfFileAbove('README.md', '$(MSBuildProjectFullPath)../'))" Link="README.md" Pack="true" PackagePath="/"/>
        <Content Condition="!Exists($([MSBuild]::GetPathOfFileAbove('.globalconfig', '$(MSBuildProjectFullPath)../')))" Remove="$(Morsels)/Content/Properties/.globalconfig"/>
    </ItemGroup>
    <!-- Package references. -->
    <ItemGroup>
        <PackageReference Include="Fody" Version="6.9.2" PrivateAssets="all" ExcludeAssets="runtime"/>
        <PackageReference Include="AsyncFixer" Version="1.6" PrivateAssets="all" ExcludeAssets="runtime"/>
        <PackageReference Include="ILMerge.Fody" Version="1.24" PrivateAssets="all" ExcludeAssets="runtime"/>
        <PackageReference Include="Divorce.Fody" Version="1.1.1" PrivateAssets="all" ExcludeAssets="runtime"/>
        <PackageReference Include="InlineIL.Fody" Version="1.10" PrivateAssets="all" ExcludeAssets="runtime"/>
        <PackageReference Include="Absence.Fody" Version="2.0.10" PrivateAssets="all" ExcludeAssets="runtime"/>
        <PackageReference Include="LocalsInit.Fody" Version="1.1" PrivateAssets="all" ExcludeAssets="runtime"/>
        <PackageReference Include="Asyncify" Version="0.9.5707.38527" PrivateAssets="all" ExcludeAssets="runtime"/>
        <PackageReference Include="InlineMethod.Fody" Version="0.8.7" PrivateAssets="all" ExcludeAssets="runtime"/>
        <PackageReference Include="GlobalUsingsAnalyzer" Version="1.4" PrivateAssets="all" ExcludeAssets="runtime"/>
        <PackageReference Include="ReflectionAnalyzers" Version="0.3.1" PrivateAssets="all" ExcludeAssets="runtime"/>
        <PackageReference Include="IDisposableAnalyzers" Version="4.0.8" PrivateAssets="all" ExcludeAssets="runtime"/>
        <PackageReference Include="Meziantou.Analyzer" Version="2.0.207" PrivateAssets="all" ExcludeAssets="runtime"/>
        <PackageReference Include="Roslynator.Analyzers" Version="4.13.1" PrivateAssets="all" ExcludeAssets="runtime"/>
        <PackageReference Include="DotNetDoodle.Analyzers" Version="0.0.2" PrivateAssets="all" ExcludeAssets="runtime"/>
        <PackageReference Include="Emik.Analyzers.Matches" Version="1.3.3" PrivateAssets="all" ExcludeAssets="runtime"/>
        <PackageReference Include="Collections.Analyzer" Version="0.2.12.1" PrivateAssets="all" ExcludeAssets="runtime"/>
        <PackageReference Include="Jubjubnest.Style.DotNet" Version="0.1.54" PrivateAssets="all" ExcludeAssets="runtime"/>
        <PackageReference Include="Scifa.CheckedExceptions" Version="1.0.14" PrivateAssets="all" ExcludeAssets="runtime"/>
        <PackageReference Include="Text.Analyzers" Version="5.0.0-1.25277.114" PrivateAssets="all" ExcludeAssets="runtime"/>
        <PackageReference Include="Emik.SourceGenerators.Tattoo" Version="2.0.7" PrivateAssets="all" ExcludeAssets="runtime"/>
        <PackageReference Include="Emik.SourceGenerators.Choices" Version="1.4.16" PrivateAssets="all" ExcludeAssets="runtime"/>
        <PackageReference Include="Emik.SourceGenerators.Implicit" Version="1.0.8" PrivateAssets="all" ExcludeAssets="runtime"/>
        <PackageReference Include="Nullable.Extended.Analyzer" Version="1.15.6581" PrivateAssets="all" ExcludeAssets="runtime"/>
        <PackageReference Include="RoslynAnalyzersDotNet" Version="1.0.6281.37723" PrivateAssets="all" ExcludeAssets="runtime"/>
        <PackageReference Include="Roslynator.CodeAnalysis.Analyzers" Version="4.13.1" PrivateAssets="all" ExcludeAssets="runtime"/>
        <Reference Condition="$([MSBuild]::IsTargetFrameworkCompatible('$(TargetFramework)', 'net20'))" Include="System" Private="false"/>
        <PackageReference Include="Microsoft.CodeAnalysis.Analyzers" Version="5.0.0-1.25277.114" PrivateAssets="all" ExcludeAssets="runtime"/>
        <Reference Condition="$([MSBuild]::IsTargetFrameworkCompatible('$(TargetFramework)', 'net20'))" Include="System.Xml" Private="false"/>
        <Reference Condition="$([MSBuild]::IsTargetFrameworkCompatible('$(TargetFramework)', 'net20'))" Include="System.Core" Private="false"/>
        <Reference Condition="$([MSBuild]::IsTargetFrameworkCompatible('$(TargetFramework)', 'net20'))" Include="System.Data" Private="false"/>
        <PackageReference Include="DotNetAnalyzers.DocumentationAnalyzers" Version="1.0.0-beta.59" PrivateAssets="all" ExcludeAssets="runtime"/>
        <Reference Condition="$([MSBuild]::IsTargetFrameworkCompatible('$(TargetFramework)', 'net20'))" Include="System.Drawing" Private="false"/>
        <Reference Condition="$([MSBuild]::IsTargetFrameworkCompatible('$(TargetFramework)', 'net20'))" Include="System.Xml.Linq" Private="false"/>
        <PackageReference Include="Microsoft.CodeAnalysis.NetAnalyzers" Version="10.0.0-preview.25358.103" PrivateAssets="all" ExcludeAssets="runtime"/>
        <Reference Condition="$([MSBuild]::IsTargetFrameworkCompatible('$(TargetFramework)', 'net20'))" Include="System.Runtime.Serialization" Private="false"/>
        <PackageReference Condition="'$(MSBuildProjectExtension)' != '.fsproj'" Include="NullGuard.Fody" Version="3.1.1" PrivateAssets="all" ExcludeAssets="runtime"/>
        <PackageReference Condition="'$(MSBuildProjectExtension)' != '.fsproj'" Include="JetBrainsAnnotations.Fody" Version="2.17" PrivateAssets="all" ExcludeAssets="runtime"/>
        <PackageReference Condition="'$(MSBuildProjectExtension)' != '.fsproj'" Include="JetBrains.Annotations" Version="2025.2.0" PrivateAssets="all" ExcludeAssets="runtime"/>
        <PackageReference Condition="'$(MSBuildProjectExtension)' == '.fsproj' and $([MSBuild]::IsTargetFrameworkCompatible('$(TargetFramework)', 'netstandard2.0'))" Include="FSharp.Core" Version="9.0.100-beta.24406.3"/>
        <Reference Condition="$([MSBuild]::IsTargetFrameworkCompatible('$(TargetFramework)', 'net20')) and !$([MSBuild]::IsTargetFrameworkCompatible('$(TargetFramework)', 'net40'))" Include="mscorlib" HintPath="$(Morsels)/References/mscorlib.dll" Private="false"/>
        <PackageReference Condition="'$(MSBuildProjectExtension)' == '.fsproj' and $([MSBuild]::IsTargetFrameworkCompatible('$(TargetFramework)', 'net20')) and !$([MSBuild]::IsTargetFrameworkCompatible('$(TargetFramework)', 'net461'))" Include="FSharp.Core" Version="4.1.18"/>
        <PackageReference Condition="'$(MSBuildProjectExtension)' == '.fsproj' and $([MSBuild]::IsTargetFrameworkCompatible('$(TargetFramework)', 'net461')) and !$([MSBuild]::IsTargetFrameworkCompatible('$(TargetFramework)', 'netstandard2.0'))" Include="FSharp.Core" Version="4.7.2"/>
        <Reference Condition="'$(MSBuildProjectExtension)' == '.fsproj' and $([MSBuild]::IsTargetFrameworkCompatible('$(TargetFramework)', 'net35')) and !$([MSBuild]::IsTargetFrameworkCompatible('$(TargetFramework)', 'net40'))" Include="System.Numerics" HintPath="$(Morsels)/References/System.Numerics.dll" Private="false"/>
        <PackageReference Condition="!$(MSBuildProjectName.Contains(&quot;Tests&quot;)) and ($([MSBuild]::IsTargetFrameworkCompatible('$(TargetFramework)', 'netstandard2.0')) or $([MSBuild]::IsTargetFrameworkCompatible('$(TargetFramework)', 'netcoreapp2.0')))" Include="DotNetProjectFile.Analyzers" Version="1.7" PrivateAssets="all" ExcludeAssets="runtime"/>
        <PackageReference Condition="($([MSBuild]::IsTargetFrameworkCompatible('$(TargetFramework)', 'net46')) or $([MSBuild]::IsTargetFrameworkCompatible('$(TargetFramework)', 'netstandard2.1')) or $([MSBuild]::IsTargetFrameworkCompatible('$(TargetFramework)', 'netcoreapp')))" Include="FastGenericNew.SourceGenerator" Version="3.3.1" PrivateAssets="all" ExcludeAssets="runtime"/>
    </ItemGroup>
    <Import Condition="Exists('$(Morsels)/Content/Properties/Directory.Build.local.props')" Project="$(Morsels)/Content/Properties/Directory.Build.local.props"/>
</Project>
